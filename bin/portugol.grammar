Package portugol;

Helpers
	digit_excluding_zero = ['1'..'9'];
	digit = ['0'..'9'];
	lowercase = ['a'..'z'];
	uppercase = ['A'..'Z'];
	letter = lowercase | uppercase ;
	cr = 13;
	lf = 10;
	tab = 9;
	anything = [0..0xffff];

States
	normal,
	comment;

Tokens
	{normal}program = 'programa';
	{normal}begin = 'inicio';
	{normal}end = 'fim';
	{normal}dot = '.';
	{normal}colon = ':';
	{normal}semicolon = ';';
	{normal}const = 'const';
	{normal}comma = ',';
	{normal}real = 'real';
	{normal}integer = 'inteiro';
	{normal}char = 'caractere';
	{normal}l_bkt = '[';
	{normal}r_bkt = ']';
	{normal}l_arrow = '<-';
	{normal}read = 'leia';
	{normal}l_par = '(';
	{normal}r_par = ')';
	{normal}write = 'escreva';
	{normal}if = 'se';
	{normal}then = 'entao';
	{normal}else = 'senao';
	{normal}end_if = 'fim se';
	{normal}evaluate = 'avalie';
	{normal}case = 'caso';
	{normal}end_evaluate = 'fim avalie';
	{normal}while = 'enquanto';
	{normal}do = 'faca';
	{normal}end_while = 'fim enquanto';
	{normal}repeat = 'repita';
	{normal}until = 'ate';
	{normal}for = 'para';
	{normal}of = 'de';
	{normal}step = 'passo';
	{normal}end_for = 'fim para';	
	{normal}minus = '-';
	{normal}plus = '+';
	{normal}star = '*';
	{normal}bar = '/';
	{normal}equal = '=';
	{normal}not_equal = '<>';
	{normal}l_equal = '<=';
	{normal}g_equal = '>=';
	{normal}less = '<';
	{normal}greater = '>';
	{normal}not = 'nao';
	{normal}and = 'e';
	{normal}or = 'ou';
	{normal}xor = 'xor';

	{normal}id = (letter | '_') (letter | digit | '_')*;
	{normal}line_comment = '//' [anything - [cr + lf ]]*  (lf cr | lf | cr );
	
	{normal->comment,comment}block_commnet_start = '/*';
	{comment->normal}block_comment_end = '*/';
	{comment}block_comment_body = ([anything - ['*'+'/']]*) | ('*' | '/');

	{normal}string = ''' ( letter | digit )* ''';
	{normal}vector = (letter | '_') (letter | digit | '_')* '[' digit* ']';
	{normal}n_int = '-'? digit digit*;
	{normal}n_real = digit digit* '.' digit digit*;
	{normal}blank = (' ' | cr | lf | tab)+;

Ignored Tokens
	blank;


Productions

programa = program id begin exp1 end dot;

var = 
	{id} id |
	{id_array} id l_bkt n_int r_bkt;

valor = 
	{string} string |
	{n_int} n_int |
	{n_real} n_real;
	
tipo = 
	{real} real |
	{integer} integer |
	{char} char;
	
declaracao = 
	{variable} tipo colon var_semicolon+|
	{const} const id valor;
	
var_semicolon = var semicolon;

comando = 
	{assignment} var l_arrow exp1 semicolon |
	{read} read l_par var comma_var* r_par semicolon ;
	 

comma_var = comma var;

exp1 = 
	{minus} minus exp1 |
	{exp2} exp2 |
	{comparacao} exp2 comparacao exp1 ;

exp2 = 
	{soma} exp3 soma exp2 |
	{exp2} exp3 ;


soma = 
	{mais} plus |
	{menos} minus;
	
comparacao = 
			{igual} equal |
			{diferente} not_equal |
			{menor_igual} l_equal |
			{maior_igual} g_equal |
			{menor} less |
			{maior} greater;
	
exp3 = 
	{exp2} exp4 mult_div exp3 |
	{exp3} exp4;
	
mult_div = 
		{mult} star |
		{div} bar;

exp4 = 
	{parenteses_exp} l_par exp1 r_par |
	{exp5} exp5;
	
exp5 =
	{valor} valor |
	{var} var ;
			
exp_logica1 = 
			{ou} exp_logica2 or exp_logica3 |
			{xor} exp_logica2 xor exp_logica3 |
			{exp_logica2} exp_logica2;

exp_logica2 = 
			{e} exp_logica3 and exp_logica2 |
			{exp_logica3} exp_logica3;

exp_logica3 = 
			{not} not exp_logica3 ;

