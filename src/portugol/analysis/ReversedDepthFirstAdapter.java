/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.analysis;

import java.util.*;
import portugol.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        {
            List<PComandoOuDeclaracao> copy = new ArrayList<PComandoOuDeclaracao>(node.getComandoOuDeclaracao());
            Collections.reverse(copy);
            for(PComandoOuDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAPrograma(node);
    }

    public void inADeclaracaoComandoOuDeclaracao(ADeclaracaoComandoOuDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoComandoOuDeclaracao(ADeclaracaoComandoOuDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoComandoOuDeclaracao(ADeclaracaoComandoOuDeclaracao node)
    {
        inADeclaracaoComandoOuDeclaracao(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outADeclaracaoComandoOuDeclaracao(node);
    }

    public void inAComandoComandoOuDeclaracao(AComandoComandoOuDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAComandoComandoOuDeclaracao(AComandoComandoOuDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoComandoOuDeclaracao(AComandoComandoOuDeclaracao node)
    {
        inAComandoComandoOuDeclaracao(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoComandoOuDeclaracao(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAIdArrayVar(AIdArrayVar node)
    {
        defaultIn(node);
    }

    public void outAIdArrayVar(AIdArrayVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdArrayVar(AIdArrayVar node)
    {
        inAIdArrayVar(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdArrayVar(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inANIntValor(ANIntValor node)
    {
        defaultIn(node);
    }

    public void outANIntValor(ANIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANIntValor(ANIntValor node)
    {
        inANIntValor(node);
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        outANIntValor(node);
    }

    public void inANRealValor(ANRealValor node)
    {
        defaultIn(node);
    }

    public void outANRealValor(ANRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANRealValor(ANRealValor node)
    {
        inANRealValor(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outANRealValor(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAIntegerTipo(AIntegerTipo node)
    {
        defaultIn(node);
    }

    public void outAIntegerTipo(AIntegerTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerTipo(AIntegerTipo node)
    {
        inAIntegerTipo(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerTipo(node);
    }

    public void inACharTipo(ACharTipo node)
    {
        defaultIn(node);
    }

    public void outACharTipo(ACharTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharTipo(ACharTipo node)
    {
        inACharTipo(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharTipo(node);
    }

    public void inAVariableDeclaracao(AVariableDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclaracao(AVariableDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclaracao(AVariableDeclaracao node)
    {
        inAVariableDeclaracao(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        {
            List<PVarSemicolon> copy = new ArrayList<PVarSemicolon>(node.getVarSemicolon());
            Collections.reverse(copy);
            for(PVarSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariableDeclaracao(node);
    }

    public void inAConstDeclaracao(AConstDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstDeclaracao(AConstDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDeclaracao(AConstDeclaracao node)
    {
        inAConstDeclaracao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAConstDeclaracao(node);
    }

    public void inAVarSemicolon(AVarSemicolon node)
    {
        defaultIn(node);
    }

    public void outAVarSemicolon(AVarSemicolon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarSemicolon(AVarSemicolon node)
    {
        inAVarSemicolon(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarSemicolon(node);
    }

    public void inASemicolonVar(ASemicolonVar node)
    {
        defaultIn(node);
    }

    public void outASemicolonVar(ASemicolonVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemicolonVar(ASemicolonVar node)
    {
        inASemicolonVar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASemicolonVar(node);
    }

    public void inAAssignmentComando(AAssignmentComando node)
    {
        defaultIn(node);
    }

    public void outAAssignmentComando(AAssignmentComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentComando(AAssignmentComando node)
    {
        inAAssignmentComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getLArrow() != null)
        {
            node.getLArrow().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAssignmentComando(node);
    }

    public void inAReadComando(AReadComando node)
    {
        defaultIn(node);
    }

    public void outAReadComando(AReadComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadComando(AReadComando node)
    {
        inAReadComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PCommaVar> copy = new ArrayList<PCommaVar>(node.getCommaVar());
            Collections.reverse(copy);
            for(PCommaVar e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRead() != null)
        {
            node.getRead().apply(this);
        }
        outAReadComando(node);
    }

    public void inAWriteComando(AWriteComando node)
    {
        defaultIn(node);
    }

    public void outAWriteComando(AWriteComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWriteComando(AWriteComando node)
    {
        inAWriteComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PCommaExp> copy = new ArrayList<PCommaExp>(node.getCommaExp());
            Collections.reverse(copy);
            for(PCommaExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWrite() != null)
        {
            node.getWrite().apply(this);
        }
        outAWriteComando(node);
    }

    public void inAIfComando(AIfComando node)
    {
        defaultIn(node);
    }

    public void outAIfComando(AIfComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfComando(AIfComando node)
    {
        inAIfComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getEndIf() != null)
        {
            node.getEndIf().apply(this);
        }
        {
            List<PElseStatement> copy = new ArrayList<PElseStatement>(node.getElseStatement());
            Collections.reverse(copy);
            for(PElseStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComandoSemicolon> copy = new ArrayList<PComandoSemicolon>(node.getComandoSemicolon());
            Collections.reverse(copy);
            for(PComandoSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpLogica1() != null)
        {
            node.getExpLogica1().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfComando(node);
    }

    public void inAEvaluateComando(AEvaluateComando node)
    {
        defaultIn(node);
    }

    public void outAEvaluateComando(AEvaluateComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEvaluateComando(AEvaluateComando node)
    {
        inAEvaluateComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getEndEvaluate() != null)
        {
            node.getEndEvaluate().apply(this);
        }
        {
            List<PElseEvaluate> copy = new ArrayList<PElseEvaluate>(node.getElseEvaluate());
            Collections.reverse(copy);
            for(PElseEvaluate e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PEvaluateBody> copy = new ArrayList<PEvaluateBody>(node.getEvaluateBody());
            Collections.reverse(copy);
            for(PEvaluateBody e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getEvaluate() != null)
        {
            node.getEvaluate().apply(this);
        }
        outAEvaluateComando(node);
    }

    public void inAWhileComando(AWhileComando node)
    {
        defaultIn(node);
    }

    public void outAWhileComando(AWhileComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileComando(AWhileComando node)
    {
        inAWhileComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getEndWhile() != null)
        {
            node.getEndWhile().apply(this);
        }
        {
            List<PComandoSemicolon> copy = new ArrayList<PComandoSemicolon>(node.getComandoSemicolon());
            Collections.reverse(copy);
            for(PComandoSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpLogica1() != null)
        {
            node.getExpLogica1().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileComando(node);
    }

    public void inARepeatComando(ARepeatComando node)
    {
        defaultIn(node);
    }

    public void outARepeatComando(ARepeatComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatComando(ARepeatComando node)
    {
        inARepeatComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpLogica1() != null)
        {
            node.getExpLogica1().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getUntil() != null)
        {
            node.getUntil().apply(this);
        }
        {
            List<PComandoSemicolon> copy = new ArrayList<PComandoSemicolon>(node.getComandoSemicolon());
            Collections.reverse(copy);
            for(PComandoSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRepeat() != null)
        {
            node.getRepeat().apply(this);
        }
        outARepeatComando(node);
    }

    public void inAForComando(AForComando node)
    {
        defaultIn(node);
    }

    public void outAForComando(AForComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForComando(AForComando node)
    {
        inAForComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getEndFor() != null)
        {
            node.getEndFor().apply(this);
        }
        {
            List<PComandoSemicolon> copy = new ArrayList<PComandoSemicolon>(node.getComandoSemicolon());
            Collections.reverse(copy);
            for(PComandoSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getUntil() != null)
        {
            node.getUntil().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getOf() != null)
        {
            node.getOf().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAForComando(node);
    }

    public void inAForStepComando(AForStepComando node)
    {
        defaultIn(node);
    }

    public void outAForStepComando(AForStepComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStepComando(AForStepComando node)
    {
        inAForStepComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getEndFor() != null)
        {
            node.getEndFor().apply(this);
        }
        {
            List<PComandoSemicolon> copy = new ArrayList<PComandoSemicolon>(node.getComandoSemicolon());
            Collections.reverse(copy);
            for(PComandoSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getUntil() != null)
        {
            node.getUntil().apply(this);
        }
        if(node.getNSteps() != null)
        {
            node.getNSteps().apply(this);
        }
        if(node.getStep() != null)
        {
            node.getStep().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getOf() != null)
        {
            node.getOf().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAForStepComando(node);
    }

    public void inAElseStatement(AElseStatement node)
    {
        defaultIn(node);
    }

    public void outAElseStatement(AElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStatement(AElseStatement node)
    {
        inAElseStatement(node);
        {
            List<PComandoSemicolon> copy = new ArrayList<PComandoSemicolon>(node.getComandoSemicolon());
            Collections.reverse(copy);
            for(PComandoSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseStatement(node);
    }

    public void inAEvaluateBody(AEvaluateBody node)
    {
        defaultIn(node);
    }

    public void outAEvaluateBody(AEvaluateBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEvaluateBody(AEvaluateBody node)
    {
        inAEvaluateBody(node);
        {
            List<PComandoSemicolon> copy = new ArrayList<PComandoSemicolon>(node.getComandoSemicolon());
            Collections.reverse(copy);
            for(PComandoSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        outAEvaluateBody(node);
    }

    public void inAElseEvaluate(AElseEvaluate node)
    {
        defaultIn(node);
    }

    public void outAElseEvaluate(AElseEvaluate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseEvaluate(AElseEvaluate node)
    {
        inAElseEvaluate(node);
        {
            List<PComandoSemicolon> copy = new ArrayList<PComandoSemicolon>(node.getComandoSemicolon());
            Collections.reverse(copy);
            for(PComandoSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseEvaluate(node);
    }

    public void inACommaVar(ACommaVar node)
    {
        defaultIn(node);
    }

    public void outACommaVar(ACommaVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaVar(ACommaVar node)
    {
        inACommaVar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaVar(node);
    }

    public void inACommaExp(ACommaExp node)
    {
        defaultIn(node);
    }

    public void outACommaExp(ACommaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaExp(ACommaExp node)
    {
        inACommaExp(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaExp(node);
    }

    public void inAComandoSemicolon(AComandoSemicolon node)
    {
        defaultIn(node);
    }

    public void outAComandoSemicolon(AComandoSemicolon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSemicolon(AComandoSemicolon node)
    {
        inAComandoSemicolon(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoSemicolon(node);
    }

    public void inAMinusExp1(AMinusExp1 node)
    {
        defaultIn(node);
    }

    public void outAMinusExp1(AMinusExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp1(AMinusExp1 node)
    {
        inAMinusExp1(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusExp1(node);
    }

    public void inAExp2Exp1(AExp2Exp1 node)
    {
        defaultIn(node);
    }

    public void outAExp2Exp1(AExp2Exp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp2Exp1(AExp2Exp1 node)
    {
        inAExp2Exp1(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAExp2Exp1(node);
    }

    public void inASomaExp2(ASomaExp2 node)
    {
        defaultIn(node);
    }

    public void outASomaExp2(ASomaExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp2(ASomaExp2 node)
    {
        inASomaExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outASomaExp2(node);
    }

    public void inAComparacaoExp2(AComparacaoExp2 node)
    {
        defaultIn(node);
    }

    public void outAComparacaoExp2(AComparacaoExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparacaoExp2(AComparacaoExp2 node)
    {
        inAComparacaoExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getComparacao() != null)
        {
            node.getComparacao().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAComparacaoExp2(node);
    }

    public void inAExp3Exp2(AExp3Exp2 node)
    {
        defaultIn(node);
    }

    public void outAExp3Exp2(AExp3Exp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp3Exp2(AExp3Exp2 node)
    {
        inAExp3Exp2(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAExp3Exp2(node);
    }

    public void inAMaisSoma(AMaisSoma node)
    {
        defaultIn(node);
    }

    public void outAMaisSoma(AMaisSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisSoma(AMaisSoma node)
    {
        inAMaisSoma(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAMaisSoma(node);
    }

    public void inAMenosSoma(AMenosSoma node)
    {
        defaultIn(node);
    }

    public void outAMenosSoma(AMenosSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosSoma(AMenosSoma node)
    {
        inAMenosSoma(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMenosSoma(node);
    }

    public void inAIgualComparacao(AIgualComparacao node)
    {
        defaultIn(node);
    }

    public void outAIgualComparacao(AIgualComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualComparacao(AIgualComparacao node)
    {
        inAIgualComparacao(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAIgualComparacao(node);
    }

    public void inADiferenteComparacao(ADiferenteComparacao node)
    {
        defaultIn(node);
    }

    public void outADiferenteComparacao(ADiferenteComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteComparacao(ADiferenteComparacao node)
    {
        inADiferenteComparacao(node);
        if(node.getNotEqual() != null)
        {
            node.getNotEqual().apply(this);
        }
        outADiferenteComparacao(node);
    }

    public void inAMenorIgualComparacao(AMenorIgualComparacao node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualComparacao(AMenorIgualComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualComparacao(AMenorIgualComparacao node)
    {
        inAMenorIgualComparacao(node);
        if(node.getLEqual() != null)
        {
            node.getLEqual().apply(this);
        }
        outAMenorIgualComparacao(node);
    }

    public void inAMaiorIgualComparacao(AMaiorIgualComparacao node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualComparacao(AMaiorIgualComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualComparacao(AMaiorIgualComparacao node)
    {
        inAMaiorIgualComparacao(node);
        if(node.getGEqual() != null)
        {
            node.getGEqual().apply(this);
        }
        outAMaiorIgualComparacao(node);
    }

    public void inAMenorComparacao(AMenorComparacao node)
    {
        defaultIn(node);
    }

    public void outAMenorComparacao(AMenorComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorComparacao(AMenorComparacao node)
    {
        inAMenorComparacao(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outAMenorComparacao(node);
    }

    public void inAMaiorComparacao(AMaiorComparacao node)
    {
        defaultIn(node);
    }

    public void outAMaiorComparacao(AMaiorComparacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorComparacao(AMaiorComparacao node)
    {
        inAMaiorComparacao(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAMaiorComparacao(node);
    }

    public void inAMultDivExp3(AMultDivExp3 node)
    {
        defaultIn(node);
    }

    public void outAMultDivExp3(AMultDivExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultDivExp3(AMultDivExp3 node)
    {
        inAMultDivExp3(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        if(node.getMultDiv() != null)
        {
            node.getMultDiv().apply(this);
        }
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAMultDivExp3(node);
    }

    public void inAExp4Exp3(AExp4Exp3 node)
    {
        defaultIn(node);
    }

    public void outAExp4Exp3(AExp4Exp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp4Exp3(AExp4Exp3 node)
    {
        inAExp4Exp3(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAExp4Exp3(node);
    }

    public void inAMultMultDiv(AMultMultDiv node)
    {
        defaultIn(node);
    }

    public void outAMultMultDiv(AMultMultDiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultMultDiv(AMultMultDiv node)
    {
        inAMultMultDiv(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAMultMultDiv(node);
    }

    public void inADivMultDiv(ADivMultDiv node)
    {
        defaultIn(node);
    }

    public void outADivMultDiv(ADivMultDiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivMultDiv(ADivMultDiv node)
    {
        inADivMultDiv(node);
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        outADivMultDiv(node);
    }

    public void inAParentesesExpExp4(AParentesesExpExp4 node)
    {
        defaultIn(node);
    }

    public void outAParentesesExpExp4(AParentesesExpExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesExpExp4(AParentesesExpExp4 node)
    {
        inAParentesesExpExp4(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParentesesExpExp4(node);
    }

    public void inAVarExp4(AVarExp4 node)
    {
        defaultIn(node);
    }

    public void outAVarExp4(AVarExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp4(AVarExp4 node)
    {
        inAVarExp4(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExp4(node);
    }

    public void inAValorExp4(AValorExp4 node)
    {
        defaultIn(node);
    }

    public void outAValorExp4(AValorExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExp4(AValorExp4 node)
    {
        inAValorExp4(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExp4(node);
    }

    public void inAExpLogica1(AExpLogica1 node)
    {
        defaultIn(node);
    }

    public void outAExpLogica1(AExpLogica1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogica1(AExpLogica1 node)
    {
        inAExpLogica1(node);
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        outAExpLogica1(node);
    }
}
