/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.analysis;

import java.util.*;
import portugol.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAPrograma(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAIdArrayVar(AIdArrayVar node)
    {
        defaultIn(node);
    }

    public void outAIdArrayVar(AIdArrayVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdArrayVar(AIdArrayVar node)
    {
        inAIdArrayVar(node);
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdArrayVar(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inANIntValor(ANIntValor node)
    {
        defaultIn(node);
    }

    public void outANIntValor(ANIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANIntValor(ANIntValor node)
    {
        inANIntValor(node);
        if(node.getNInt() != null)
        {
            node.getNInt().apply(this);
        }
        outANIntValor(node);
    }

    public void inANRealValor(ANRealValor node)
    {
        defaultIn(node);
    }

    public void outANRealValor(ANRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANRealValor(ANRealValor node)
    {
        inANRealValor(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outANRealValor(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAIntegerTipo(AIntegerTipo node)
    {
        defaultIn(node);
    }

    public void outAIntegerTipo(AIntegerTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerTipo(AIntegerTipo node)
    {
        inAIntegerTipo(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerTipo(node);
    }

    public void inACharTipo(ACharTipo node)
    {
        defaultIn(node);
    }

    public void outACharTipo(ACharTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharTipo(ACharTipo node)
    {
        inACharTipo(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharTipo(node);
    }

    public void inAVariableDeclaracao(AVariableDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclaracao(AVariableDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclaracao(AVariableDeclaracao node)
    {
        inAVariableDeclaracao(node);
        {
            List<PVarSemicolon> copy = new ArrayList<PVarSemicolon>(node.getVarSemicolon());
            Collections.reverse(copy);
            for(PVarSemicolon e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariableDeclaracao(node);
    }

    public void inAConstDeclaracao(AConstDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstDeclaracao(AConstDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDeclaracao(AConstDeclaracao node)
    {
        inAConstDeclaracao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAConstDeclaracao(node);
    }

    public void inAVarSemicolon(AVarSemicolon node)
    {
        defaultIn(node);
    }

    public void outAVarSemicolon(AVarSemicolon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarSemicolon(AVarSemicolon node)
    {
        inAVarSemicolon(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarSemicolon(node);
    }

    public void inAXComando(AXComando node)
    {
        defaultIn(node);
    }

    public void outAXComando(AXComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXComando(AXComando node)
    {
        inAXComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLArrow() != null)
        {
            node.getLArrow().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAXComando(node);
    }

    public void inAReadComando(AReadComando node)
    {
        defaultIn(node);
    }

    public void outAReadComando(AReadComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReadComando(AReadComando node)
    {
        inAReadComando(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        {
            List<PCommaVar> copy = new ArrayList<PCommaVar>(node.getCommaVar());
            Collections.reverse(copy);
            for(PCommaVar e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRead() != null)
        {
            node.getRead().apply(this);
        }
        outAReadComando(node);
    }

    public void inACommaVar(ACommaVar node)
    {
        defaultIn(node);
    }

    public void outACommaVar(ACommaVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaVar(ACommaVar node)
    {
        inACommaVar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACommaVar(node);
    }

    public void inASomaExp(ASomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaExp(ASomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp(ASomaExp node)
    {
        inASomaExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASomaExp(node);
    }

    public void inATermoExp(ATermoExp node)
    {
        defaultIn(node);
    }

    public void outATermoExp(ATermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExp(ATermoExp node)
    {
        inATermoExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExp(node);
    }

    public void inAMaisSoma(AMaisSoma node)
    {
        defaultIn(node);
    }

    public void outAMaisSoma(AMaisSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisSoma(AMaisSoma node)
    {
        inAMaisSoma(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAMaisSoma(node);
    }

    public void inAMenosSoma(AMenosSoma node)
    {
        defaultIn(node);
    }

    public void outAMenosSoma(AMenosSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosSoma(AMenosSoma node)
    {
        inAMenosSoma(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMenosSoma(node);
    }

    public void inATermoTermo(ATermoTermo node)
    {
        defaultIn(node);
    }

    public void outATermoTermo(ATermoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoTermo(ATermoTermo node)
    {
        inATermoTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoTermo(node);
    }

    public void inAFatorTermo(AFatorTermo node)
    {
        defaultIn(node);
    }

    public void outAFatorTermo(AFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        inAFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorTermo(node);
    }

    public void inADiv(ADiv node)
    {
        defaultIn(node);
    }

    public void outADiv(ADiv node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiv(ADiv node)
    {
        inADiv(node);
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        outADiv(node);
    }

    public void inAFatorFator(AFatorFator node)
    {
        defaultIn(node);
    }

    public void outAFatorFator(AFatorFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorFator(AFatorFator node)
    {
        inAFatorFator(node);
        if(node.getElem() != null)
        {
            node.getElem().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorFator(node);
    }

    public void inAElemFator(AElemFator node)
    {
        defaultIn(node);
    }

    public void outAElemFator(AElemFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElemFator(AElemFator node)
    {
        inAElemFator(node);
        if(node.getElem() != null)
        {
            node.getElem().apply(this);
        }
        outAElemFator(node);
    }

    public void inAMult(AMult node)
    {
        defaultIn(node);
    }

    public void outAMult(AMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMult(AMult node)
    {
        inAMult(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAMult(node);
    }

    public void inAParentesesExpElem(AParentesesExpElem node)
    {
        defaultIn(node);
    }

    public void outAParentesesExpElem(AParentesesExpElem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesExpElem(AParentesesExpElem node)
    {
        inAParentesesExpElem(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParentesesExpElem(node);
    }

    public void inAValorElem(AValorElem node)
    {
        defaultIn(node);
    }

    public void outAValorElem(AValorElem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorElem(AValorElem node)
    {
        inAValorElem(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorElem(node);
    }

    public void inAVarElem(AVarElem node)
    {
        defaultIn(node);
    }

    public void outAVarElem(AVarElem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarElem(AVarElem node)
    {
        inAVarElem(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarElem(node);
    }

    public void inAExpLogicaElem(AExpLogicaElem node)
    {
        defaultIn(node);
    }

    public void outAExpLogicaElem(AExpLogicaElem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogicaElem(AExpLogicaElem node)
    {
        inAExpLogicaElem(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAExpLogicaElem(node);
    }

    public void inAExpLogica(AExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpLogica(AExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogica(AExpLogica node)
    {
        inAExpLogica(node);
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        outAExpLogica(node);
    }
}
