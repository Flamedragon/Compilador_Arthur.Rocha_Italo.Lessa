/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.analysis;

import portugol.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPrograma(APrograma node);

    void caseTProgram(TProgram node);
    void caseTBegin(TBegin node);
    void caseTEnd(TEnd node);
    void caseTDot(TDot node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTConst(TConst node);
    void caseTComma(TComma node);
    void caseTReal(TReal node);
    void caseTInteger(TInteger node);
    void caseTChar(TChar node);
    void caseTLBkt(TLBkt node);
    void caseTRBkt(TRBkt node);
    void caseTLArrow(TLArrow node);
    void caseTRead(TRead node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTWrite(TWrite node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTEndIf(TEndIf node);
    void caseTEvaluate(TEvaluate node);
    void caseTCase(TCase node);
    void caseTEndEvaluate(TEndEvaluate node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTEndWhile(TEndWhile node);
    void caseTRepeat(TRepeat node);
    void caseTUntil(TUntil node);
    void caseTFor(TFor node);
    void caseTOf(TOf node);
    void caseTStep(TStep node);
    void caseTEndFor(TEndFor node);
    void caseTMinus(TMinus node);
    void caseTPlus(TPlus node);
    void caseTStar(TStar node);
    void caseTBar(TBar node);
    void caseTEqual(TEqual node);
    void caseTNotEqual(TNotEqual node);
    void caseTLEqual(TLEqual node);
    void caseTGEqual(TGEqual node);
    void caseTLess(TLess node);
    void caseTGreater(TGreater node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTId(TId node);
    void caseTLineComment(TLineComment node);
    void caseTBlockCommnet(TBlockCommnet node);
    void caseTString(TString node);
    void caseTVector(TVector node);
    void caseTNInt(TNInt node);
    void caseTNReal(TNReal node);
    void caseTBlank(TBlank node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
