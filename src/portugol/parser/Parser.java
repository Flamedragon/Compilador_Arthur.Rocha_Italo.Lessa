/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.parser;

import portugol.lexer.*;
import portugol.node.*;
import portugol.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprograma2Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ADeclaracaoComandoOuDeclaracao */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AComandoComandoOuDeclaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AIdVar */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AIdArrayVar */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AStringValor */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ANIntValor */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce ANRealValor */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AIntegerTipo */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce ACharTipo */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce AAvariabledeclaracao1Declaracao */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AAvariabledeclaracao2Declaracao */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AConstDeclaracao */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce AVarSemicolon */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce ASemicolonVar */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AAssignmentComando */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce AAreadcomando1Comando */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AAreadcomando2Comando */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, false);
            }
            break;
            case 20: /* reduce AAwritecomando1Comando */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce AAwritecomando2Comando */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce AAifcomando1Comando */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce AAifcomando2Comando */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce AAevaluatecomando1Comando */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list, false);
            }
            break;
            case 25: /* reduce AAevaluatecomando2Comando */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list, false);
            }
            break;
            case 26: /* reduce AWhileComando */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list, false);
            }
            break;
            case 27: /* reduce ARepeatComando */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list, false);
            }
            break;
            case 28: /* reduce AForComando */
            {
                ArrayList<Object> list = new28();
                push(goTo(8), list, false);
            }
            break;
            case 29: /* reduce AForStepComando */
            {
                ArrayList<Object> list = new29();
                push(goTo(8), list, false);
            }
            break;
            case 30: /* reduce AElseStatement */
            {
                ArrayList<Object> list = new30();
                push(goTo(9), list, false);
            }
            break;
            case 31: /* reduce AEvaluateBody */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list, false);
            }
            break;
            case 32: /* reduce AElseEvaluate */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list, false);
            }
            break;
            case 33: /* reduce ACommaVar */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list, false);
            }
            break;
            case 34: /* reduce ACommaExp */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list, false);
            }
            break;
            case 35: /* reduce AComandoSemicolon */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list, false);
            }
            break;
            case 36: /* reduce AMinusExp1 */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce AExp2Exp1 */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list, false);
            }
            break;
            case 38: /* reduce ASomaExp2 */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, false);
            }
            break;
            case 39: /* reduce AComparacaoExp2 */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce AExp3Exp2 */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list, false);
            }
            break;
            case 41: /* reduce AMaisSoma */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list, false);
            }
            break;
            case 42: /* reduce AMenosSoma */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list, false);
            }
            break;
            case 43: /* reduce AIgualComparacao */
            {
                ArrayList<Object> list = new43();
                push(goTo(18), list, false);
            }
            break;
            case 44: /* reduce ADiferenteComparacao */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list, false);
            }
            break;
            case 45: /* reduce AMenorIgualComparacao */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list, false);
            }
            break;
            case 46: /* reduce AMaiorIgualComparacao */
            {
                ArrayList<Object> list = new46();
                push(goTo(18), list, false);
            }
            break;
            case 47: /* reduce AMenorComparacao */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list, false);
            }
            break;
            case 48: /* reduce AMaiorComparacao */
            {
                ArrayList<Object> list = new48();
                push(goTo(18), list, false);
            }
            break;
            case 49: /* reduce AMultDivExp3 */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list, false);
            }
            break;
            case 50: /* reduce AExp4Exp3 */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list, false);
            }
            break;
            case 51: /* reduce AMultMultDiv */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list, false);
            }
            break;
            case 52: /* reduce ADivMultDiv */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list, false);
            }
            break;
            case 53: /* reduce AParentesesExpExp4 */
            {
                ArrayList<Object> list = new53();
                push(goTo(21), list, false);
            }
            break;
            case 54: /* reduce AVarExp4 */
            {
                ArrayList<Object> list = new54();
                push(goTo(21), list, false);
            }
            break;
            case 55: /* reduce AValorExp4 */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list, false);
            }
            break;
            case 56: /* reduce AExpLogica1 */
            {
                ArrayList<Object> list = new56();
                push(goTo(22), list, false);
            }
            break;
            case 57: /* reduce ATerminal$ComandoOuDeclaracao */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list, true);
            }
            break;
            case 58: /* reduce ANonTerminal$ComandoOuDeclaracao */
            {
                ArrayList<Object> list = new58();
                push(goTo(23), list, true);
            }
            break;
            case 59: /* reduce ATerminal$VarSemicolon */
            {
                ArrayList<Object> list = new59();
                push(goTo(24), list, true);
            }
            break;
            case 60: /* reduce ANonTerminal$VarSemicolon */
            {
                ArrayList<Object> list = new60();
                push(goTo(24), list, true);
            }
            break;
            case 61: /* reduce ATerminal$CommaVar */
            {
                ArrayList<Object> list = new61();
                push(goTo(25), list, true);
            }
            break;
            case 62: /* reduce ANonTerminal$CommaVar */
            {
                ArrayList<Object> list = new62();
                push(goTo(25), list, true);
            }
            break;
            case 63: /* reduce ATerminal$CommaExp */
            {
                ArrayList<Object> list = new63();
                push(goTo(26), list, true);
            }
            break;
            case 64: /* reduce ANonTerminal$CommaExp */
            {
                ArrayList<Object> list = new64();
                push(goTo(26), list, true);
            }
            break;
            case 65: /* reduce ATerminal$ComandoSemicolon */
            {
                ArrayList<Object> list = new65();
                push(goTo(27), list, true);
            }
            break;
            case 66: /* reduce ANonTerminal$ComandoSemicolon */
            {
                ArrayList<Object> list = new66();
                push(goTo(27), list, true);
            }
            break;
            case 67: /* reduce ATerminal$ElseStatement */
            {
                ArrayList<Object> list = new67();
                push(goTo(28), list, true);
            }
            break;
            case 68: /* reduce ANonTerminal$ElseStatement */
            {
                ArrayList<Object> list = new68();
                push(goTo(28), list, true);
            }
            break;
            case 69: /* reduce ATerminal$ElseEvaluate */
            {
                ArrayList<Object> list = new69();
                push(goTo(29), list, true);
            }
            break;
            case 70: /* reduce ANonTerminal$ElseEvaluate */
            {
                ArrayList<Object> list = new70();
                push(goTo(29), list, true);
            }
            break;
            case 71: /* reduce ATerminal$EvaluateBody */
            {
                ArrayList<Object> list = new71();
                push(goTo(30), list, true);
            }
            break;
            case 72: /* reduce ANonTerminal$EvaluateBody */
            {
                ArrayList<Object> list = new72();
                push(goTo(30), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TProgram tprogramNode2;
        TId tidNode3;
        TBegin tbeginNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TEnd tendNode6;
        TDot tdotNode7;
        tprogramNode2 = (TProgram)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tbeginNode4 = (TBegin)nodeArrayList3.get(0);
        {
            // Block
        }
        tendNode6 = (TEnd)nodeArrayList4.get(0);
        tdotNode7 = (TDot)nodeArrayList5.get(0);

        pprogramaNode1 = new APrograma(tprogramNode2, tidNode3, tbeginNode4, listNode5, tendNode6, tdotNode7);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprograma2Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TProgram tprogramNode2;
        TId tidNode3;
        TBegin tbeginNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TEnd tendNode7;
        TDot tdotNode8;
        tprogramNode2 = (TProgram)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tbeginNode4 = (TBegin)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tendNode7 = (TEnd)nodeArrayList5.get(0);
        tdotNode8 = (TDot)nodeArrayList6.get(0);

        pprogramaNode1 = new APrograma(tprogramNode2, tidNode3, tbeginNode4, listNode6, tendNode7, tdotNode8);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADeclaracaoComandoOuDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoOuDeclaracao pcomandooudeclaracaoNode1;
        {
            // Block
        PDeclaracao pdeclaracaoNode2;
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList1.get(0);

        pcomandooudeclaracaoNode1 = new ADeclaracaoComandoOuDeclaracao(pdeclaracaoNode2);
        }
	nodeList.add(pcomandooudeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AComandoComandoOuDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoOuDeclaracao pcomandooudeclaracaoNode1;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);

        pcomandooudeclaracaoNode1 = new AComandoComandoOuDeclaracao(pcomandoNode2);
        }
	nodeList.add(pcomandooudeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AIdArrayVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TLBkt tlbktNode3;
        TNInt tnintNode4;
        TRBkt trbktNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlbktNode3 = (TLBkt)nodeArrayList2.get(0);
        tnintNode4 = (TNInt)nodeArrayList3.get(0);
        trbktNode5 = (TRBkt)nodeArrayList4.get(0);

        pvarNode1 = new AIdArrayVar(tidNode2, tlbktNode3, tnintNode4, trbktNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ANIntValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNInt tnintNode2;
        tnintNode2 = (TNInt)nodeArrayList1.get(0);

        pvalorNode1 = new ANIntValor(tnintNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ANRealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNReal tnrealNode2;
        tnrealNode2 = (TNReal)nodeArrayList1.get(0);

        pvalorNode1 = new ANRealValor(tnrealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AIntegerTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        ptipoNode1 = new AIntegerTipo(tintegerNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ACharTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        ptipoNode1 = new ACharTipo(tcharNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAvariabledeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TColon tcolonNode3;
        PVar pvarNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TSemicolon tsemicolonNode6;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        {
            // Block
        }
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new AVariableDeclaracao(ptipoNode2, tcolonNode3, pvarNode4, listNode5, tsemicolonNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAvariabledeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TColon tcolonNode3;
        PVar pvarNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TSemicolon tsemicolonNode7;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pdeclaracaoNode1 = new AVariableDeclaracao(ptipoNode2, tcolonNode3, pvarNode4, listNode6, tsemicolonNode7);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AConstDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TConst tconstNode2;
        TId tidNode3;
        PValor pvalorNode4;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AConstDeclaracao(tconstNode2, tidNode3, pvalorNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AVarSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarSemicolon pvarsemicolonNode1;
        {
            // Block
        PVar pvarNode2;
        TSemicolon tsemicolonNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pvarsemicolonNode1 = new AVarSemicolon(pvarNode2, tsemicolonNode3);
        }
	nodeList.add(pvarsemicolonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASemicolonVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSemicolonVar psemicolonvarNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        PVar pvarNode3;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);

        psemicolonvarNode1 = new ASemicolonVar(tsemicolonNode2, pvarNode3);
        }
	nodeList.add(psemicolonvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAssignmentComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TLArrow tlarrowNode3;
        PExp1 pexp1Node4;
        TSemicolon tsemicolonNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tlarrowNode3 = (TLArrow)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pcomandoNode1 = new AAssignmentComando(pvarNode2, tlarrowNode3, pexp1Node4, tsemicolonNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAreadcomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TRead treadNode2;
        TLPar tlparNode3;
        PVar pvarNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRPar trparNode6;
        TSemicolon tsemicolonNode7;
        treadNode2 = (TRead)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        {
            // Block
        }
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pcomandoNode1 = new AReadComando(treadNode2, tlparNode3, pvarNode4, listNode5, trparNode6, tsemicolonNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAreadcomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TRead treadNode2;
        TLPar tlparNode3;
        PVar pvarNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TRPar trparNode7;
        TSemicolon tsemicolonNode8;
        treadNode2 = (TRead)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pcomandoNode1 = new AReadComando(treadNode2, tlparNode3, pvarNode4, listNode6, trparNode7, tsemicolonNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAwritecomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TWrite twriteNode2;
        TLPar tlparNode3;
        PExp1 pexp1Node4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRPar trparNode6;
        TSemicolon tsemicolonNode7;
        twriteNode2 = (TWrite)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);
        {
            // Block
        }
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pcomandoNode1 = new AWriteComando(twriteNode2, tlparNode3, pexp1Node4, listNode5, trparNode6, tsemicolonNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAwritecomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TWrite twriteNode2;
        TLPar tlparNode3;
        PExp1 pexp1Node4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TRPar trparNode7;
        TSemicolon tsemicolonNode8;
        twriteNode2 = (TWrite)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pcomandoNode1 = new AWriteComando(twriteNode2, tlparNode3, pexp1Node4, listNode6, trparNode7, tsemicolonNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAifcomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpLogica1 pexplogica1Node4;
        TRPar trparNode5;
        TThen tthenNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndIf tendifNode10;
        TSemicolon tsemicolonNode11;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexplogica1Node4 = (PExpLogica1)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tthenNode6 = (TThen)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        }
        tendifNode10 = (TEndIf)nodeArrayList7.get(0);
        tsemicolonNode11 = (TSemicolon)nodeArrayList8.get(0);

        pcomandoNode1 = new AIfComando(tifNode2, tlparNode3, pexplogica1Node4, trparNode5, tthenNode6, listNode8, listNode9, tendifNode10, tsemicolonNode11);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAifcomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PExpLogica1 pexplogica1Node4;
        TRPar trparNode5;
        TThen tthenNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEndIf tendifNode11;
        TSemicolon tsemicolonNode12;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexplogica1Node4 = (PExpLogica1)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tthenNode6 = (TThen)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendifNode11 = (TEndIf)nodeArrayList8.get(0);
        tsemicolonNode12 = (TSemicolon)nodeArrayList9.get(0);

        pcomandoNode1 = new AIfComando(tifNode2, tlparNode3, pexplogica1Node4, trparNode5, tthenNode6, listNode8, listNode10, tendifNode11, tsemicolonNode12);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAevaluatecomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TEvaluate tevaluateNode2;
        TLPar tlparNode3;
        PExp1 pexp1Node4;
        TRPar trparNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TEndEvaluate tendevaluateNode9;
        TSemicolon tsemicolonNode10;
        tevaluateNode2 = (TEvaluate)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tendevaluateNode9 = (TEndEvaluate)nodeArrayList6.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList7.get(0);

        pcomandoNode1 = new AEvaluateComando(tevaluateNode2, tlparNode3, pexp1Node4, trparNode5, listNode6, listNode8, tendevaluateNode9, tsemicolonNode10);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAevaluatecomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TEvaluate tevaluateNode2;
        TLPar tlparNode3;
        PExp1 pexp1Node4;
        TRPar trparNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TEndEvaluate tendevaluateNode10;
        TSemicolon tsemicolonNode11;
        tevaluateNode2 = (TEvaluate)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tendevaluateNode10 = (TEndEvaluate)nodeArrayList7.get(0);
        tsemicolonNode11 = (TSemicolon)nodeArrayList8.get(0);

        pcomandoNode1 = new AEvaluateComando(tevaluateNode2, tlparNode3, pexp1Node4, trparNode5, listNode7, listNode9, tendevaluateNode10, tsemicolonNode11);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AWhileComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PExpLogica1 pexplogica1Node4;
        TRPar trparNode5;
        TDo tdoNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TEndWhile tendwhileNode9;
        TSemicolon tsemicolonNode10;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexplogica1Node4 = (PExpLogica1)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tdoNode6 = (TDo)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tendwhileNode9 = (TEndWhile)nodeArrayList7.get(0);
        tsemicolonNode10 = (TSemicolon)nodeArrayList8.get(0);

        pcomandoNode1 = new AWhileComando(twhileNode2, tlparNode3, pexplogica1Node4, trparNode5, tdoNode6, listNode8, tendwhileNode9, tsemicolonNode10);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ARepeatComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TRepeat trepeatNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TUntil tuntilNode5;
        TLPar tlparNode6;
        PExpLogica1 pexplogica1Node7;
        TRPar trparNode8;
        TSemicolon tsemicolonNode9;
        trepeatNode2 = (TRepeat)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tuntilNode5 = (TUntil)nodeArrayList3.get(0);
        tlparNode6 = (TLPar)nodeArrayList4.get(0);
        pexplogica1Node7 = (PExpLogica1)nodeArrayList5.get(0);
        trparNode8 = (TRPar)nodeArrayList6.get(0);
        tsemicolonNode9 = (TSemicolon)nodeArrayList7.get(0);

        pcomandoNode1 = new ARepeatComando(trepeatNode2, listNode4, tuntilNode5, tlparNode6, pexplogica1Node7, trparNode8, tsemicolonNode9);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AForComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TFor tforNode2;
        PVar pvarNode3;
        TOf tofNode4;
        TNInt tnintNode5;
        TUntil tuntilNode6;
        TNInt tnintNode7;
        TDo tdoNode8;
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        TEndFor tendforNode11;
        TSemicolon tsemicolonNode12;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        tofNode4 = (TOf)nodeArrayList3.get(0);
        tnintNode5 = (TNInt)nodeArrayList4.get(0);
        tuntilNode6 = (TUntil)nodeArrayList5.get(0);
        tnintNode7 = (TNInt)nodeArrayList6.get(0);
        tdoNode8 = (TDo)nodeArrayList7.get(0);
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        tendforNode11 = (TEndFor)nodeArrayList9.get(0);
        tsemicolonNode12 = (TSemicolon)nodeArrayList10.get(0);

        pcomandoNode1 = new AForComando(tforNode2, pvarNode3, tofNode4, tnintNode5, tuntilNode6, tnintNode7, tdoNode8, listNode10, tendforNode11, tsemicolonNode12);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AForStepComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TFor tforNode2;
        PVar pvarNode3;
        TOf tofNode4;
        TNInt tnintNode5;
        TStep tstepNode6;
        TNInt tnintNode7;
        TUntil tuntilNode8;
        TNInt tnintNode9;
        TDo tdoNode10;
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        TEndFor tendforNode13;
        TSemicolon tsemicolonNode14;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        tofNode4 = (TOf)nodeArrayList3.get(0);
        tnintNode5 = (TNInt)nodeArrayList4.get(0);
        tstepNode6 = (TStep)nodeArrayList5.get(0);
        tnintNode7 = (TNInt)nodeArrayList6.get(0);
        tuntilNode8 = (TUntil)nodeArrayList7.get(0);
        tnintNode9 = (TNInt)nodeArrayList8.get(0);
        tdoNode10 = (TDo)nodeArrayList9.get(0);
        {
            // Block
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        listNode11 = (LinkedList)nodeArrayList10.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        tendforNode13 = (TEndFor)nodeArrayList11.get(0);
        tsemicolonNode14 = (TSemicolon)nodeArrayList12.get(0);

        pcomandoNode1 = new AForStepComando(tforNode2, pvarNode3, tofNode4, tnintNode5, tstepNode6, tnintNode7, tuntilNode8, tnintNode9, tdoNode10, listNode12, tendforNode13, tsemicolonNode14);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStatement pelsestatementNode1;
        {
            // Block
        TElse telseNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        telseNode2 = (TElse)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pelsestatementNode1 = new AElseStatement(telseNode2, listNode4);
        }
	nodeList.add(pelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AEvaluateBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEvaluateBody pevaluatebodyNode1;
        {
            // Block
        TCase tcaseNode2;
        PValor pvalorNode3;
        TColon tcolonNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tcaseNode2 = (TCase)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pevaluatebodyNode1 = new AEvaluateBody(tcaseNode2, pvalorNode3, tcolonNode4, listNode6);
        }
	nodeList.add(pevaluatebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AElseEvaluate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseEvaluate pelseevaluateNode1;
        {
            // Block
        TElse telseNode2;
        TColon tcolonNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pelseevaluateNode1 = new AElseEvaluate(telseNode2, tcolonNode3, listNode5);
        }
	nodeList.add(pelseevaluateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ACommaVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaVar pcommavarNode1;
        {
            // Block
        TComma tcommaNode2;
        PVar pvarNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);

        pcommavarNode1 = new ACommaVar(tcommaNode2, pvarNode3);
        }
	nodeList.add(pcommavarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ACommaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaExp pcommaexpNode1;
        {
            // Block
        TComma tcommaNode2;
        PExp1 pexp1Node3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexp1Node3 = (PExp1)nodeArrayList2.get(0);

        pcommaexpNode1 = new ACommaExp(tcommaNode2, pexp1Node3);
        }
	nodeList.add(pcommaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AComandoSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSemicolon pcomandosemicolonNode1;
        {
            // Block
        PComando pcomandoNode2;
        TSemicolon tsemicolonNode3;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pcomandosemicolonNode1 = new AComandoSemicolon(pcomandoNode2, tsemicolonNode3);
        }
	nodeList.add(pcomandosemicolonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AMinusExp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        TMinus tminusNode2;
        PExp1 pexp1Node3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pexp1Node3 = (PExp1)nodeArrayList2.get(0);

        pexp1Node1 = new AMinusExp1(tminusNode2, pexp1Node3);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AExp2Exp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp2 pexp2Node2;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);

        pexp1Node1 = new AExp2Exp1(pexp2Node2);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ASomaExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp3 pexp3Node2;
        PSoma psomaNode3;
        PExp2 pexp2Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        psomaNode3 = (PSoma)nodeArrayList2.get(0);
        pexp2Node4 = (PExp2)nodeArrayList3.get(0);

        pexp2Node1 = new ASomaExp2(pexp3Node2, psomaNode3, pexp2Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AComparacaoExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp3 pexp3Node2;
        PComparacao pcomparacaoNode3;
        PExp2 pexp2Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        pcomparacaoNode3 = (PComparacao)nodeArrayList2.get(0);
        pexp2Node4 = (PExp2)nodeArrayList3.get(0);

        pexp2Node1 = new AComparacaoExp2(pexp3Node2, pcomparacaoNode3, pexp2Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AExp3Exp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp3 pexp3Node2;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);

        pexp2Node1 = new AExp3Exp2(pexp3Node2);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AMaisSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSoma psomaNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        psomaNode1 = new AMaisSoma(tplusNode2);
        }
	nodeList.add(psomaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMenosSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSoma psomaNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        psomaNode1 = new AMenosSoma(tminusNode2);
        }
	nodeList.add(psomaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AIgualComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AIgualComparacao(tequalNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ADiferenteComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TNotEqual tnotequalNode2;
        tnotequalNode2 = (TNotEqual)nodeArrayList1.get(0);

        pcomparacaoNode1 = new ADiferenteComparacao(tnotequalNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMenorIgualComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TLEqual tlequalNode2;
        tlequalNode2 = (TLEqual)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AMenorIgualComparacao(tlequalNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AMaiorIgualComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TGEqual tgequalNode2;
        tgequalNode2 = (TGEqual)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AMaiorIgualComparacao(tgequalNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMenorComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TLess tlessNode2;
        tlessNode2 = (TLess)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AMenorComparacao(tlessNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AMaiorComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TGreater tgreaterNode2;
        tgreaterNode2 = (TGreater)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AMaiorComparacao(tgreaterNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AMultDivExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp4 pexp4Node2;
        PMultDiv pmultdivNode3;
        PExp3 pexp3Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        pmultdivNode3 = (PMultDiv)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp3Node1 = new AMultDivExp3(pexp4Node2, pmultdivNode3, pexp3Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AExp4Exp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp4 pexp4Node2;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);

        pexp3Node1 = new AExp4Exp3(pexp4Node2);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AMultMultDiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultDiv pmultdivNode1;
        {
            // Block
        TStar tstarNode2;
        tstarNode2 = (TStar)nodeArrayList1.get(0);

        pmultdivNode1 = new AMultMultDiv(tstarNode2);
        }
	nodeList.add(pmultdivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ADivMultDiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultDiv pmultdivNode1;
        {
            // Block
        TBar tbarNode2;
        tbarNode2 = (TBar)nodeArrayList1.get(0);

        pmultdivNode1 = new ADivMultDiv(tbarNode2);
        }
	nodeList.add(pmultdivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AParentesesExpExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        TLPar tlparNode2;
        PExp1 pexp1Node3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexp1Node3 = (PExp1)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexp4Node1 = new AParentesesExpExp4(tlparNode2, pexp1Node3, trparNode4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AVarExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexp4Node1 = new AVarExp4(pvarNode2);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AValorExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexp4Node1 = new AValorExp4(pvalorNode2);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AExpLogica1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica1 pexplogica1Node1;
        {
            // Block
        TNInt tnintNode2;
        tnintNode2 = (TNInt)nodeArrayList1.get(0);

        pexplogica1Node1 = new AExpLogica1(tnintNode2);
        }
	nodeList.add(pexplogica1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ATerminal$ComandoOuDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComandoOuDeclaracao pcomandooudeclaracaoNode1;
        pcomandooudeclaracaoNode1 = (PComandoOuDeclaracao)nodeArrayList1.get(0);
	if(pcomandooudeclaracaoNode1 != null)
	{
	  listNode2.add(pcomandooudeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ANonTerminal$ComandoOuDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComandoOuDeclaracao pcomandooudeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandooudeclaracaoNode2 = (PComandoOuDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandooudeclaracaoNode2 != null)
	{
	  listNode3.add(pcomandooudeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ATerminal$VarSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarSemicolon pvarsemicolonNode1;
        pvarsemicolonNode1 = (PVarSemicolon)nodeArrayList1.get(0);
	if(pvarsemicolonNode1 != null)
	{
	  listNode2.add(pvarsemicolonNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ANonTerminal$VarSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarSemicolon pvarsemicolonNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarsemicolonNode2 = (PVarSemicolon)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarsemicolonNode2 != null)
	{
	  listNode3.add(pvarsemicolonNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ATerminal$CommaVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommaVar pcommavarNode1;
        pcommavarNode1 = (PCommaVar)nodeArrayList1.get(0);
	if(pcommavarNode1 != null)
	{
	  listNode2.add(pcommavarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ANonTerminal$CommaVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommaVar pcommavarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommavarNode2 = (PCommaVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommavarNode2 != null)
	{
	  listNode3.add(pcommavarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ATerminal$CommaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommaExp pcommaexpNode1;
        pcommaexpNode1 = (PCommaExp)nodeArrayList1.get(0);
	if(pcommaexpNode1 != null)
	{
	  listNode2.add(pcommaexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANonTerminal$CommaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommaExp pcommaexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommaexpNode2 = (PCommaExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaexpNode2 != null)
	{
	  listNode3.add(pcommaexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ATerminal$ComandoSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComandoSemicolon pcomandosemicolonNode1;
        pcomandosemicolonNode1 = (PComandoSemicolon)nodeArrayList1.get(0);
	if(pcomandosemicolonNode1 != null)
	{
	  listNode2.add(pcomandosemicolonNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ANonTerminal$ComandoSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComandoSemicolon pcomandosemicolonNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandosemicolonNode2 = (PComandoSemicolon)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandosemicolonNode2 != null)
	{
	  listNode3.add(pcomandosemicolonNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ATerminal$ElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PElseStatement pelsestatementNode1;
        pelsestatementNode1 = (PElseStatement)nodeArrayList1.get(0);
	if(pelsestatementNode1 != null)
	{
	  listNode2.add(pelsestatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ANonTerminal$ElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PElseStatement pelsestatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pelsestatementNode2 = (PElseStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pelsestatementNode2 != null)
	{
	  listNode3.add(pelsestatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATerminal$ElseEvaluate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PElseEvaluate pelseevaluateNode1;
        pelseevaluateNode1 = (PElseEvaluate)nodeArrayList1.get(0);
	if(pelseevaluateNode1 != null)
	{
	  listNode2.add(pelseevaluateNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANonTerminal$ElseEvaluate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PElseEvaluate pelseevaluateNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pelseevaluateNode2 = (PElseEvaluate)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pelseevaluateNode2 != null)
	{
	  listNode3.add(pelseevaluateNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATerminal$EvaluateBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PEvaluateBody pevaluatebodyNode1;
        pevaluatebodyNode1 = (PEvaluateBody)nodeArrayList1.get(0);
	if(pevaluatebodyNode1 != null)
	{
	  listNode2.add(pevaluatebodyNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANonTerminal$EvaluateBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PEvaluateBody pevaluatebodyNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pevaluatebodyNode2 = (PEvaluateBody)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pevaluatebodyNode2 != null)
	{
	  listNode3.add(pevaluatebodyNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {48, SHIFT, 3}, },
			{{-1, ERROR, 2}, {57, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {1, SHIFT, 4}, },
			{{-1, ERROR, 4}, {2, SHIFT, 5}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 8}, {10, SHIFT, 9}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, ERROR, 5}, {3, SHIFT, 24}, },
			{{-1, ERROR, 6}, {48, SHIFT, 25}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 10}, {15, SHIFT, 26}, },
			{{-1, ERROR, 11}, {15, SHIFT, 27}, },
			{{-1, ERROR, 12}, {15, SHIFT, 28}, },
			{{-1, ERROR, 13}, {15, SHIFT, 29}, },
			{{-1, ERROR, 14}, {15, SHIFT, 30}, },
			{{-1, ERROR, 15}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, ERROR, 16}, {48, SHIFT, 17}, },
			{{-1, REDUCE, 4}, {11, SHIFT, 35}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 19}, {13, SHIFT, 36}, },
			{{-1, ERROR, 20}, {4, SHIFT, 37}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 23}, {2, SHIFT, 38}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 8}, {10, SHIFT, 9}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 25}, {53, SHIFT, 40}, {55, SHIFT, 41}, {56, SHIFT, 42}, },
			{{-1, ERROR, 26}, {48, SHIFT, 17}, },
			{{-1, ERROR, 27}, {15, SHIFT, 45}, {34, SHIFT, 46}, {48, SHIFT, 17}, {53, SHIFT, 40}, {55, SHIFT, 41}, {56, SHIFT, 42}, },
			{{-1, ERROR, 28}, {55, SHIFT, 53}, },
			{{-1, ERROR, 29}, {15, SHIFT, 45}, {34, SHIFT, 46}, {48, SHIFT, 17}, {53, SHIFT, 40}, {55, SHIFT, 41}, {56, SHIFT, 42}, },
			{{-1, ERROR, 30}, {55, SHIFT, 53}, },
			{{-1, ERROR, 31}, {5, SHIFT, 57}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 33}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {29, SHIFT, 58}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, ERROR, 34}, {31, SHIFT, 60}, },
			{{-1, ERROR, 35}, {55, SHIFT, 61}, },
			{{-1, ERROR, 36}, {15, SHIFT, 45}, {34, SHIFT, 46}, {48, SHIFT, 17}, {53, SHIFT, 40}, {55, SHIFT, 41}, {56, SHIFT, 42}, },
			{{-1, ERROR, 37}, {48, SHIFT, 17}, },
			{{-1, ERROR, 38}, {3, SHIFT, 64}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 44}, {7, SHIFT, 65}, {16, SHIFT, 66}, },
			{{-1, ERROR, 45}, {15, SHIFT, 45}, {34, SHIFT, 46}, {48, SHIFT, 17}, {53, SHIFT, 40}, {55, SHIFT, 41}, {56, SHIFT, 42}, },
			{{-1, ERROR, 46}, {15, SHIFT, 45}, {34, SHIFT, 46}, {48, SHIFT, 17}, {53, SHIFT, 40}, {55, SHIFT, 41}, {56, SHIFT, 42}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 49}, {7, SHIFT, 71}, {16, SHIFT, 72}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 40}, {34, SHIFT, 75}, {35, SHIFT, 76}, {38, SHIFT, 77}, {39, SHIFT, 78}, {40, SHIFT, 79}, {41, SHIFT, 80}, {42, SHIFT, 81}, {43, SHIFT, 82}, },
			{{-1, REDUCE, 50}, {36, SHIFT, 85}, {37, SHIFT, 86}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 54}, {16, SHIFT, 88}, },
			{{-1, ERROR, 55}, {16, SHIFT, 89}, },
			{{-1, ERROR, 56}, {16, SHIFT, 90}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 58}, {15, SHIFT, 91}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 60}, {55, SHIFT, 92}, },
			{{-1, ERROR, 61}, {12, SHIFT, 93}, },
			{{-1, ERROR, 62}, {5, SHIFT, 94}, },
			{{-1, ERROR, 63}, {5, SHIFT, 95}, {48, SHIFT, 17}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 65}, {48, SHIFT, 17}, },
			{{-1, ERROR, 66}, {5, SHIFT, 100}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 68}, {7, SHIFT, 65}, {16, SHIFT, 101}, },
			{{-1, ERROR, 69}, {16, SHIFT, 103}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 71}, {15, SHIFT, 45}, {34, SHIFT, 46}, {48, SHIFT, 17}, {53, SHIFT, 40}, {55, SHIFT, 41}, {56, SHIFT, 42}, },
			{{-1, ERROR, 72}, {5, SHIFT, 105}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 74}, {7, SHIFT, 71}, {16, SHIFT, 106}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 83}, {15, SHIFT, 45}, {48, SHIFT, 17}, {53, SHIFT, 40}, {55, SHIFT, 41}, {56, SHIFT, 42}, },
			{{-1, ERROR, 84}, {15, SHIFT, 45}, {48, SHIFT, 17}, {53, SHIFT, 40}, {55, SHIFT, 41}, {56, SHIFT, 42}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 87}, {15, SHIFT, 45}, {48, SHIFT, 17}, {53, SHIFT, 40}, {55, SHIFT, 41}, {56, SHIFT, 42}, },
			{{-1, ERROR, 88}, {19, SHIFT, 111}, },
			{{-1, ERROR, 89}, {20, SHIFT, 112}, {23, SHIFT, 113}, },
			{{-1, ERROR, 90}, {26, SHIFT, 118}, },
			{{-1, ERROR, 91}, {55, SHIFT, 53}, },
			{{-1, ERROR, 92}, {29, SHIFT, 120}, {32, SHIFT, 121}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 96}, {5, SHIFT, 122}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 98}, {5, SHIFT, 123}, {48, SHIFT, 17}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 101}, {5, SHIFT, 125}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 106}, {5, SHIFT, 126}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 111}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, ERROR, 112}, {4, SHIFT, 128}, },
			{{-1, ERROR, 113}, {53, SHIFT, 40}, {55, SHIFT, 41}, {56, SHIFT, 42}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 116}, {20, SHIFT, 112}, {24, SHIFT, 130}, },
			{{-1, ERROR, 117}, {20, SHIFT, 112}, {23, SHIFT, 113}, },
			{{-1, ERROR, 118}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, ERROR, 119}, {16, SHIFT, 135}, },
			{{-1, ERROR, 120}, {55, SHIFT, 136}, },
			{{-1, ERROR, 121}, {55, SHIFT, 137}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 127}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {20, SHIFT, 138}, {21, SHIFT, 139}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, ERROR, 128}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, ERROR, 129}, {4, SHIFT, 143}, },
			{{-1, ERROR, 130}, {5, SHIFT, 144}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 133}, {20, SHIFT, 112}, {24, SHIFT, 145}, },
			{{-1, ERROR, 134}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {27, SHIFT, 146}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, ERROR, 135}, {5, SHIFT, 147}, },
			{{-1, ERROR, 136}, {26, SHIFT, 148}, },
			{{-1, ERROR, 137}, {29, SHIFT, 149}, },
			{{-1, ERROR, 138}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, ERROR, 139}, {5, SHIFT, 151}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 141}, {20, SHIFT, 138}, {21, SHIFT, 152}, },
			{{-1, REDUCE, 32}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, ERROR, 143}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 145}, {5, SHIFT, 155}, },
			{{-1, ERROR, 146}, {5, SHIFT, 156}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 148}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, ERROR, 149}, {55, SHIFT, 158}, },
			{{-1, REDUCE, 30}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 152}, {5, SHIFT, 159}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 31}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 157}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {33, SHIFT, 160}, {48, SHIFT, 17}, },
			{{-1, ERROR, 158}, {26, SHIFT, 161}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 160}, {5, SHIFT, 162}, },
			{{-1, ERROR, 161}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {48, SHIFT, 17}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 163}, {14, SHIFT, 10}, {17, SHIFT, 11}, {18, SHIFT, 12}, {22, SHIFT, 13}, {25, SHIFT, 14}, {28, SHIFT, 15}, {30, SHIFT, 16}, {33, SHIFT, 164}, {48, SHIFT, 17}, },
			{{-1, ERROR, 164}, {5, SHIFT, 165}, },
			{{-1, REDUCE, 29}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 18}, {23, 39}, },
			{{-1, 19}, {16, 34}, {26, 44}, {27, 47}, {29, 47}, {36, 47}, {37, 63}, {45, 47}, {46, 47}, {63, 96}, {65, 99}, {71, 47}, {83, 47}, {84, 47}, {87, 47}, {98, 96}, },
			{{-1, 48}, {25, 43}, {113, 129}, },
			{{-1, 20}, },
			{{-1, 21}, },
			{{-1, 97}, {98, 124}, },
			{{-1, -1}, },
			{{-1, 31}, {4, 22}, {23, 22}, },
			{{-1, 140}, {141, 153}, },
			{{-1, 114}, {117, 132}, },
			{{-1, 115}, {116, 131}, {133, 131}, },
			{{-1, 67}, {68, 102}, },
			{{-1, 73}, {74, 107}, },
			{{-1, 32}, {33, 59}, {127, 59}, {134, 59}, {142, 59}, {150, 59}, {154, 59}, {157, 59}, {163, 59}, },
			{{-1, 49}, {29, 55}, {36, 62}, {45, 69}, {46, 70}, {71, 104}, },
			{{-1, 50}, {83, 108}, {84, 109}, },
			{{-1, 83}, },
			{{-1, 84}, },
			{{-1, 51}, {87, 110}, },
			{{-1, 87}, },
			{{-1, 52}, },
			{{-1, 54}, {30, 56}, {91, 119}, },
			{{-1, 23}, },
			{{-1, 98}, },
			{{-1, 68}, },
			{{-1, 74}, },
			{{-1, 33}, {111, 127}, {118, 134}, {128, 142}, {138, 150}, {143, 154}, {148, 157}, {161, 163}, },
			{{-1, 141}, },
			{{-1, 116}, {117, 133}, },
			{{-1, 117}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'fim', 'const', 'real', 'inteiro', 'caractere', 'leia', 'escreva', 'se', 'avalie', 'enquanto', 'repita', 'para', id",
			"expecting: '.'",
			"expecting: ':'",
			"expecting: '('",
			"expecting: 'leia', 'escreva', 'se', 'avalie', 'enquanto', 'repita', 'para', id",
			"expecting: ';', ',', '[', '<-', ')', 'de', '-', '+', '*', '/', '=', '<>', '<=', '>=', '<', '>', id",
			"expecting: '<-'",
			"expecting: string, n int, n real",
			"expecting: '(', '-', id, string, n int, n real",
			"expecting: n int",
			"expecting: ';'",
			"expecting: 'leia', 'escreva', 'se', 'senao', 'fim se', 'avalie', 'caso', 'fim avalie', 'enquanto', 'fim enquanto', 'repita', 'ate', 'para', 'fim para', id",
			"expecting: 'leia', 'escreva', 'se', 'avalie', 'enquanto', 'repita', 'ate', 'para', id",
			"expecting: 'de'",
			"expecting: 'fim', ':', ';', 'const', ',', 'real', 'inteiro', 'caractere', 'leia', ')', 'escreva', 'se', 'avalie', 'enquanto', 'repita', 'para', '-', '+', '*', '/', '=', '<>', '<=', '>=', '<', '>', id",
			"expecting: ',', ')'",
			"expecting: ';', ',', ')', '-', '+', '*', '/', '=', '<>', '<=', '>=', '<', '>'",
			"expecting: ';', ',', ')'",
			"expecting: ';', ',', ')', '-', '+', '=', '<>', '<=', '>=', '<', '>'",
			"expecting: ')'",
			"expecting: ']'",
			"expecting: ';', id",
			"expecting: '(', id, string, n int, n real",
			"expecting: 'entao'",
			"expecting: 'senao', 'caso'",
			"expecting: 'faca'",
			"expecting: 'ate', 'passo'",
			"expecting: ';', ',', '<-', ')', 'de', '-', '+', '*', '/', '=', '<>', '<=', '>=', '<', '>', id",
			"expecting: 'fim', ';', 'const', 'real', 'inteiro', 'caractere', 'leia', 'escreva', 'se', 'avalie', 'enquanto', 'repita', 'para', id",
			"expecting: 'senao', 'fim avalie'",
			"expecting: 'leia', 'escreva', 'se', 'senao', 'fim se', 'avalie', 'enquanto', 'repita', 'para', id",
			"expecting: 'leia', 'escreva', 'se', 'avalie', 'enquanto', 'fim enquanto', 'repita', 'para', id",
			"expecting: 'ate'",
			"expecting: 'senao', 'fim se'",
			"expecting: 'leia', 'escreva', 'se', 'senao', 'avalie', 'fim avalie', 'enquanto', 'repita', 'para', id",
			"expecting: 'leia', 'escreva', 'se', 'senao', 'avalie', 'caso', 'enquanto', 'repita', 'para', id",
			"expecting: 'leia', 'escreva', 'se', 'avalie', 'enquanto', 'repita', 'para', 'fim para', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 1, 6, 6, 6, 7, 7, 7, 7, 7, 8, 1, 9, 4, 10, 6, 4, 4, 4, 2, 11, 1, 12, 13, 12, 13, 14, 15, 16, 17, 13, 12, 1, 5, 4, 18, 18, 18, 4, 19, 12, 12, 20, 20, 19, 21, 22, 20, 23, 23, 23, 23, 15, 7, 15, 13, 24, 14, 25, 2, 1, 14, 19, 19, 23, 21, 12, 14, 19, 19, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 28, 29, 13, 30, 31, 32, 4, 14, 25, 25, 19, 32, 14, 19, 20, 19, 32, 14, 19, 21, 21, 22, 8, 6, 11, 28, 33, 33, 28, 8, 23, 13, 13, 25, 4, 25, 32, 32, 34, 8, 6, 14, 33, 28, 33, 35, 14, 29, 36, 8, 14, 37, 37, 38, 8, 32, 14, 14, 32, 8, 13, 34, 32, 14, 37, 39, 32, 32, 40, 29, 32, 14, 8, 32, 40, 14, 32, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
