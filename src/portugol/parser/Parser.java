/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.parser;

import portugol.lexer.*;
import portugol.node.*;
import portugol.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprograma2Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ADeclaracaoComandoOuDeclaracao */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AComandoComandoOuDeclaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AIdVar */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AIdArrayVar */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AStringValor */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ANIntValor */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce ANRealValor */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AIntegerTipo */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce ACharTipo */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce AAvariabledeclaracao1Declaracao */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AAvariabledeclaracao2Declaracao */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AConstDeclaracao */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce AVarSemicolon */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce ASemicolonVar */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AAssignmentComando */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce AAreadcomando1Comando */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AAreadcomando2Comando */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, false);
            }
            break;
            case 20: /* reduce AElseStatement */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list, false);
            }
            break;
            case 21: /* reduce AEvaluateBody */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce AElseEvaluate */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list, false);
            }
            break;
            case 23: /* reduce ACommaVar */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list, false);
            }
            break;
            case 24: /* reduce ACommaExp */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list, false);
            }
            break;
            case 25: /* reduce AComandoSemicolon */
            {
                ArrayList<Object> list = new25();
                push(goTo(14), list, false);
            }
            break;
            case 26: /* reduce ARelationalExpressionEqualityExpression */
            {
                ArrayList<Object> list = new26();
                push(goTo(15), list, false);
            }
            break;
            case 27: /* reduce AEqEqualityExpression */
            {
                ArrayList<Object> list = new27();
                push(goTo(15), list, false);
            }
            break;
            case 28: /* reduce ANeqEqualityExpression */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list, false);
            }
            break;
            case 29: /* reduce ASadditiveExpressionRelationalExpression */
            {
                ArrayList<Object> list = new29();
                push(goTo(16), list, false);
            }
            break;
            case 30: /* reduce ALtRelationalExpression */
            {
                ArrayList<Object> list = new30();
                push(goTo(16), list, false);
            }
            break;
            case 31: /* reduce AGtRelationalExpression */
            {
                ArrayList<Object> list = new31();
                push(goTo(16), list, false);
            }
            break;
            case 32: /* reduce ALteqRelationalExpression */
            {
                ArrayList<Object> list = new32();
                push(goTo(16), list, false);
            }
            break;
            case 33: /* reduce AGteqRelationalExpression */
            {
                ArrayList<Object> list = new33();
                push(goTo(16), list, false);
            }
            break;
            case 34: /* reduce AMultiplicativeExpressionAdditiveExpression */
            {
                ArrayList<Object> list = new34();
                push(goTo(17), list, false);
            }
            break;
            case 35: /* reduce APlusAdditiveExpression */
            {
                ArrayList<Object> list = new35();
                push(goTo(17), list, false);
            }
            break;
            case 36: /* reduce AMinusAdditiveExpression */
            {
                ArrayList<Object> list = new36();
                push(goTo(17), list, false);
            }
            break;
            case 37: /* reduce AUnaryExpressionMultiplicativeExpression */
            {
                ArrayList<Object> list = new37();
                push(goTo(18), list, false);
            }
            break;
            case 38: /* reduce AStarMultiplicativeExpression */
            {
                ArrayList<Object> list = new38();
                push(goTo(18), list, false);
            }
            break;
            case 39: /* reduce ADivMultiplicativeExpression */
            {
                ArrayList<Object> list = new39();
                push(goTo(18), list, false);
            }
            break;
            case 40: /* reduce AMinusUnaryExpression */
            {
                ArrayList<Object> list = new40();
                push(goTo(19), list, false);
            }
            break;
            case 41: /* reduce AUnaryExpressionNotPlusMinusUnaryExpression */
            {
                ArrayList<Object> list = new41();
                push(goTo(19), list, false);
            }
            break;
            case 42: /* reduce APostfixExpressionUnaryExpressionNotPlusMinus */
            {
                ArrayList<Object> list = new42();
                push(goTo(20), list, false);
            }
            break;
            case 43: /* reduce AComplementUnaryExpressionNotPlusMinus */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list, false);
            }
            break;
            case 44: /* reduce ACastExpressionUnaryExpressionNotPlusMinus */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list, false);
            }
            break;
            case 45: /* reduce AValorPostfixExpression */
            {
                ArrayList<Object> list = new45();
                push(goTo(21), list, false);
            }
            break;
            case 46: /* reduce AVarPostfixExpression */
            {
                ArrayList<Object> list = new46();
                push(goTo(21), list, false);
            }
            break;
            case 47: /* reduce AExpression */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list, false);
            }
            break;
            case 48: /* reduce AConstantExpression */
            {
                ArrayList<Object> list = new48();
                push(goTo(23), list, false);
            }
            break;
            case 49: /* reduce AEqualityExpressionAndExpression */
            {
                ArrayList<Object> list = new49();
                push(goTo(24), list, false);
            }
            break;
            case 50: /* reduce AAndExpressionAndExpression */
            {
                ArrayList<Object> list = new50();
                push(goTo(24), list, false);
            }
            break;
            case 51: /* reduce AAndExpressionXorExpression */
            {
                ArrayList<Object> list = new51();
                push(goTo(25), list, false);
            }
            break;
            case 52: /* reduce AExclusiveOrExpressionXorExpression */
            {
                ArrayList<Object> list = new52();
                push(goTo(25), list, false);
            }
            break;
            case 53: /* reduce AExclusiveOrExpressionOrExpression */
            {
                ArrayList<Object> list = new53();
                push(goTo(26), list, false);
            }
            break;
            case 54: /* reduce AInclusiveOrExpressionOrExpression */
            {
                ArrayList<Object> list = new54();
                push(goTo(26), list, false);
            }
            break;
            case 55: /* reduce AOrExpressionAssignmentExpression */
            {
                ArrayList<Object> list = new55();
                push(goTo(27), list, false);
            }
            break;
            case 56: /* reduce AAssignmentAssignmentExpression */
            {
                ArrayList<Object> list = new56();
                push(goTo(27), list, false);
            }
            break;
            case 57: /* reduce AAssignment */
            {
                ArrayList<Object> list = new57();
                push(goTo(28), list, false);
            }
            break;
            case 58: /* reduce ATerminal$ComandoOuDeclaracao */
            {
                ArrayList<Object> list = new58();
                push(goTo(29), list, true);
            }
            break;
            case 59: /* reduce ANonTerminal$ComandoOuDeclaracao */
            {
                ArrayList<Object> list = new59();
                push(goTo(29), list, true);
            }
            break;
            case 60: /* reduce ATerminal$VarSemicolon */
            {
                ArrayList<Object> list = new60();
                push(goTo(30), list, true);
            }
            break;
            case 61: /* reduce ANonTerminal$VarSemicolon */
            {
                ArrayList<Object> list = new61();
                push(goTo(30), list, true);
            }
            break;
            case 62: /* reduce ATerminal$CommaVar */
            {
                ArrayList<Object> list = new62();
                push(goTo(31), list, true);
            }
            break;
            case 63: /* reduce ANonTerminal$CommaVar */
            {
                ArrayList<Object> list = new63();
                push(goTo(31), list, true);
            }
            break;
            case 64: /* reduce ATerminal$ComandoSemicolon */
            {
                ArrayList<Object> list = new64();
                push(goTo(32), list, true);
            }
            break;
            case 65: /* reduce ANonTerminal$ComandoSemicolon */
            {
                ArrayList<Object> list = new65();
                push(goTo(32), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TProgram tprogramNode2;
        TId tidNode3;
        TBegin tbeginNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TEnd tendNode6;
        TDot tdotNode7;
        tprogramNode2 = (TProgram)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tbeginNode4 = (TBegin)nodeArrayList3.get(0);
        {
            // Block
        }
        tendNode6 = (TEnd)nodeArrayList4.get(0);
        tdotNode7 = (TDot)nodeArrayList5.get(0);

        pprogramaNode1 = new APrograma(tprogramNode2, tidNode3, tbeginNode4, listNode5, tendNode6, tdotNode7);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprograma2Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TProgram tprogramNode2;
        TId tidNode3;
        TBegin tbeginNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TEnd tendNode7;
        TDot tdotNode8;
        tprogramNode2 = (TProgram)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tbeginNode4 = (TBegin)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tendNode7 = (TEnd)nodeArrayList5.get(0);
        tdotNode8 = (TDot)nodeArrayList6.get(0);

        pprogramaNode1 = new APrograma(tprogramNode2, tidNode3, tbeginNode4, listNode6, tendNode7, tdotNode8);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADeclaracaoComandoOuDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoOuDeclaracao pcomandooudeclaracaoNode1;
        {
            // Block
        PDeclaracao pdeclaracaoNode2;
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList1.get(0);

        pcomandooudeclaracaoNode1 = new ADeclaracaoComandoOuDeclaracao(pdeclaracaoNode2);
        }
	nodeList.add(pcomandooudeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AComandoComandoOuDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoOuDeclaracao pcomandooudeclaracaoNode1;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);

        pcomandooudeclaracaoNode1 = new AComandoComandoOuDeclaracao(pcomandoNode2);
        }
	nodeList.add(pcomandooudeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AIdArrayVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TLBkt tlbktNode3;
        TNInt tnintNode4;
        TRBkt trbktNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlbktNode3 = (TLBkt)nodeArrayList2.get(0);
        tnintNode4 = (TNInt)nodeArrayList3.get(0);
        trbktNode5 = (TRBkt)nodeArrayList4.get(0);

        pvarNode1 = new AIdArrayVar(tidNode2, tlbktNode3, tnintNode4, trbktNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ANIntValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNInt tnintNode2;
        tnintNode2 = (TNInt)nodeArrayList1.get(0);

        pvalorNode1 = new ANIntValor(tnintNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ANRealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNReal tnrealNode2;
        tnrealNode2 = (TNReal)nodeArrayList1.get(0);

        pvalorNode1 = new ANRealValor(tnrealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AIntegerTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        ptipoNode1 = new AIntegerTipo(tintegerNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ACharTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        ptipoNode1 = new ACharTipo(tcharNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAvariabledeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TColon tcolonNode3;
        PVar pvarNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TSemicolon tsemicolonNode6;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        {
            // Block
        }
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new AVariableDeclaracao(ptipoNode2, tcolonNode3, pvarNode4, listNode5, tsemicolonNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAvariabledeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TColon tcolonNode3;
        PVar pvarNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TSemicolon tsemicolonNode7;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pdeclaracaoNode1 = new AVariableDeclaracao(ptipoNode2, tcolonNode3, pvarNode4, listNode6, tsemicolonNode7);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AConstDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TConst tconstNode2;
        TId tidNode3;
        PValor pvalorNode4;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AConstDeclaracao(tconstNode2, tidNode3, pvalorNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AVarSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarSemicolon pvarsemicolonNode1;
        {
            // Block
        PVar pvarNode2;
        TSemicolon tsemicolonNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pvarsemicolonNode1 = new AVarSemicolon(pvarNode2, tsemicolonNode3);
        }
	nodeList.add(pvarsemicolonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASemicolonVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSemicolonVar psemicolonvarNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        PVar pvarNode3;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);

        psemicolonvarNode1 = new ASemicolonVar(tsemicolonNode2, pvarNode3);
        }
	nodeList.add(psemicolonvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAssignmentComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TLArrow tlarrowNode3;
        PEqualityExpression pequalityexpressionNode4;
        TSemicolon tsemicolonNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tlarrowNode3 = (TLArrow)nodeArrayList2.get(0);
        pequalityexpressionNode4 = (PEqualityExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pcomandoNode1 = new AAssignmentComando(pvarNode2, tlarrowNode3, pequalityexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAreadcomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TRead treadNode2;
        TLPar tlparNode3;
        PVar pvarNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRPar trparNode6;
        TSemicolon tsemicolonNode7;
        treadNode2 = (TRead)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        {
            // Block
        }
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pcomandoNode1 = new AReadComando(treadNode2, tlparNode3, pvarNode4, listNode5, trparNode6, tsemicolonNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAreadcomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TRead treadNode2;
        TLPar tlparNode3;
        PVar pvarNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TRPar trparNode7;
        TSemicolon tsemicolonNode8;
        treadNode2 = (TRead)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pcomandoNode1 = new AReadComando(treadNode2, tlparNode3, pvarNode4, listNode6, trparNode7, tsemicolonNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStatement pelsestatementNode1;
        {
            // Block
        TElse telseNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        telseNode2 = (TElse)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pelsestatementNode1 = new AElseStatement(telseNode2, listNode4);
        }
	nodeList.add(pelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AEvaluateBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEvaluateBody pevaluatebodyNode1;
        {
            // Block
        TCase tcaseNode2;
        PValor pvalorNode3;
        TColon tcolonNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tcaseNode2 = (TCase)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pevaluatebodyNode1 = new AEvaluateBody(tcaseNode2, pvalorNode3, tcolonNode4, listNode6);
        }
	nodeList.add(pevaluatebodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AElseEvaluate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseEvaluate pelseevaluateNode1;
        {
            // Block
        TElse telseNode2;
        TColon tcolonNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pelseevaluateNode1 = new AElseEvaluate(telseNode2, tcolonNode3, listNode5);
        }
	nodeList.add(pelseevaluateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ACommaVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaVar pcommavarNode1;
        {
            // Block
        TComma tcommaNode2;
        PVar pvarNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);

        pcommavarNode1 = new ACommaVar(tcommaNode2, pvarNode3);
        }
	nodeList.add(pcommavarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ACommaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaExp pcommaexpNode1;
        {
            // Block
        TComma tcommaNode2;
        PEqualityExpression pequalityexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pequalityexpressionNode3 = (PEqualityExpression)nodeArrayList2.get(0);

        pcommaexpNode1 = new ACommaExp(tcommaNode2, pequalityexpressionNode3);
        }
	nodeList.add(pcommaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AComandoSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSemicolon pcomandosemicolonNode1;
        {
            // Block
        PComando pcomandoNode2;
        TSemicolon tsemicolonNode3;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pcomandosemicolonNode1 = new AComandoSemicolon(pcomandoNode2, tsemicolonNode3);
        }
	nodeList.add(pcomandosemicolonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ARelationalExpressionEqualityExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEqualityExpression pequalityexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);

        pequalityexpressionNode1 = new ARelationalExpressionEqualityExpression(prelationalexpressionNode2);
        }
	nodeList.add(pequalityexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AEqEqualityExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEqualityExpression pequalityexpressionNode1;
        {
            // Block
        PEqualityExpression pequalityexpressionNode2;
        TEqual tequalNode3;
        PRelationalExpression prelationalexpressionNode4;
        pequalityexpressionNode2 = (PEqualityExpression)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        prelationalexpressionNode4 = (PRelationalExpression)nodeArrayList3.get(0);

        pequalityexpressionNode1 = new AEqEqualityExpression(pequalityexpressionNode2, tequalNode3, prelationalexpressionNode4);
        }
	nodeList.add(pequalityexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANeqEqualityExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEqualityExpression pequalityexpressionNode1;
        {
            // Block
        PEqualityExpression pequalityexpressionNode2;
        TNotEqual tnotequalNode3;
        PRelationalExpression prelationalexpressionNode4;
        pequalityexpressionNode2 = (PEqualityExpression)nodeArrayList1.get(0);
        tnotequalNode3 = (TNotEqual)nodeArrayList2.get(0);
        prelationalexpressionNode4 = (PRelationalExpression)nodeArrayList3.get(0);

        pequalityexpressionNode1 = new ANeqEqualityExpression(pequalityexpressionNode2, tnotequalNode3, prelationalexpressionNode4);
        }
	nodeList.add(pequalityexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASadditiveExpressionRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PAdditiveExpression padditiveexpressionNode2;
        padditiveexpressionNode2 = (PAdditiveExpression)nodeArrayList1.get(0);

        prelationalexpressionNode1 = new ASadditiveExpressionRelationalExpression(padditiveexpressionNode2);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ALtRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        TLess tlessNode3;
        PAdditiveExpression padditiveexpressionNode4;
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);
        tlessNode3 = (TLess)nodeArrayList2.get(0);
        padditiveexpressionNode4 = (PAdditiveExpression)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new ALtRelationalExpression(prelationalexpressionNode2, tlessNode3, padditiveexpressionNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AGtRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        TGreater tgreaterNode3;
        PAdditiveExpression padditiveexpressionNode4;
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);
        tgreaterNode3 = (TGreater)nodeArrayList2.get(0);
        padditiveexpressionNode4 = (PAdditiveExpression)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new AGtRelationalExpression(prelationalexpressionNode2, tgreaterNode3, padditiveexpressionNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ALteqRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        TLEqual tlequalNode3;
        PAdditiveExpression padditiveexpressionNode4;
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);
        tlequalNode3 = (TLEqual)nodeArrayList2.get(0);
        padditiveexpressionNode4 = (PAdditiveExpression)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new ALteqRelationalExpression(prelationalexpressionNode2, tlequalNode3, padditiveexpressionNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AGteqRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationalExpression prelationalexpressionNode1;
        {
            // Block
        PRelationalExpression prelationalexpressionNode2;
        TGEqual tgequalNode3;
        PAdditiveExpression padditiveexpressionNode4;
        prelationalexpressionNode2 = (PRelationalExpression)nodeArrayList1.get(0);
        tgequalNode3 = (TGEqual)nodeArrayList2.get(0);
        padditiveexpressionNode4 = (PAdditiveExpression)nodeArrayList3.get(0);

        prelationalexpressionNode1 = new AGteqRelationalExpression(prelationalexpressionNode2, tgequalNode3, padditiveexpressionNode4);
        }
	nodeList.add(prelationalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AMultiplicativeExpressionAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExpression padditiveexpressionNode1;
        {
            // Block
        PMultiplicativeExpression pmultiplicativeexpressionNode2;
        pmultiplicativeexpressionNode2 = (PMultiplicativeExpression)nodeArrayList1.get(0);

        padditiveexpressionNode1 = new AMultiplicativeExpressionAdditiveExpression(pmultiplicativeexpressionNode2);
        }
	nodeList.add(padditiveexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce APlusAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExpression padditiveexpressionNode1;
        {
            // Block
        PAdditiveExpression padditiveexpressionNode2;
        TPlus tplusNode3;
        PMultiplicativeExpression pmultiplicativeexpressionNode4;
        padditiveexpressionNode2 = (PAdditiveExpression)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pmultiplicativeexpressionNode4 = (PMultiplicativeExpression)nodeArrayList3.get(0);

        padditiveexpressionNode1 = new APlusAdditiveExpression(padditiveexpressionNode2, tplusNode3, pmultiplicativeexpressionNode4);
        }
	nodeList.add(padditiveexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AMinusAdditiveExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAdditiveExpression padditiveexpressionNode1;
        {
            // Block
        PAdditiveExpression padditiveexpressionNode2;
        TMinus tminusNode3;
        PMultiplicativeExpression pmultiplicativeexpressionNode4;
        padditiveexpressionNode2 = (PAdditiveExpression)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pmultiplicativeexpressionNode4 = (PMultiplicativeExpression)nodeArrayList3.get(0);

        padditiveexpressionNode1 = new AMinusAdditiveExpression(padditiveexpressionNode2, tminusNode3, pmultiplicativeexpressionNode4);
        }
	nodeList.add(padditiveexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AUnaryExpressionMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplicativeExpression pmultiplicativeexpressionNode1;
        {
            // Block
        PUnaryExpression punaryexpressionNode2;
        punaryexpressionNode2 = (PUnaryExpression)nodeArrayList1.get(0);

        pmultiplicativeexpressionNode1 = new AUnaryExpressionMultiplicativeExpression(punaryexpressionNode2);
        }
	nodeList.add(pmultiplicativeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AStarMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplicativeExpression pmultiplicativeexpressionNode1;
        {
            // Block
        PMultiplicativeExpression pmultiplicativeexpressionNode2;
        TStar tstarNode3;
        PUnaryExpression punaryexpressionNode4;
        pmultiplicativeexpressionNode2 = (PMultiplicativeExpression)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        punaryexpressionNode4 = (PUnaryExpression)nodeArrayList3.get(0);

        pmultiplicativeexpressionNode1 = new AStarMultiplicativeExpression(pmultiplicativeexpressionNode2, tstarNode3, punaryexpressionNode4);
        }
	nodeList.add(pmultiplicativeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ADivMultiplicativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultiplicativeExpression pmultiplicativeexpressionNode1;
        {
            // Block
        PMultiplicativeExpression pmultiplicativeexpressionNode2;
        TBar tbarNode3;
        PUnaryExpression punaryexpressionNode4;
        pmultiplicativeexpressionNode2 = (PMultiplicativeExpression)nodeArrayList1.get(0);
        tbarNode3 = (TBar)nodeArrayList2.get(0);
        punaryexpressionNode4 = (PUnaryExpression)nodeArrayList3.get(0);

        pmultiplicativeexpressionNode1 = new ADivMultiplicativeExpression(pmultiplicativeexpressionNode2, tbarNode3, punaryexpressionNode4);
        }
	nodeList.add(pmultiplicativeexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AMinusUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryExpression punaryexpressionNode1;
        {
            // Block
        TMinus tminusNode2;
        PUnaryExpression punaryexpressionNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        punaryexpressionNode3 = (PUnaryExpression)nodeArrayList2.get(0);

        punaryexpressionNode1 = new AMinusUnaryExpression(tminusNode2, punaryexpressionNode3);
        }
	nodeList.add(punaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AUnaryExpressionNotPlusMinusUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryExpression punaryexpressionNode1;
        {
            // Block
        PUnaryExpressionNotPlusMinus punaryexpressionnotplusminusNode2;
        punaryexpressionnotplusminusNode2 = (PUnaryExpressionNotPlusMinus)nodeArrayList1.get(0);

        punaryexpressionNode1 = new AUnaryExpressionNotPlusMinusUnaryExpression(punaryexpressionnotplusminusNode2);
        }
	nodeList.add(punaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce APostfixExpressionUnaryExpressionNotPlusMinus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryExpressionNotPlusMinus punaryexpressionnotplusminusNode1;
        {
            // Block
        PPostfixExpression ppostfixexpressionNode2;
        ppostfixexpressionNode2 = (PPostfixExpression)nodeArrayList1.get(0);

        punaryexpressionnotplusminusNode1 = new APostfixExpressionUnaryExpressionNotPlusMinus(ppostfixexpressionNode2);
        }
	nodeList.add(punaryexpressionnotplusminusNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AComplementUnaryExpressionNotPlusMinus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryExpressionNotPlusMinus punaryexpressionnotplusminusNode1;
        {
            // Block
        TNot tnotNode2;
        PUnaryExpression punaryexpressionNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        punaryexpressionNode3 = (PUnaryExpression)nodeArrayList2.get(0);

        punaryexpressionnotplusminusNode1 = new AComplementUnaryExpressionNotPlusMinus(tnotNode2, punaryexpressionNode3);
        }
	nodeList.add(punaryexpressionnotplusminusNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ACastExpressionUnaryExpressionNotPlusMinus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryExpressionNotPlusMinus punaryexpressionnotplusminusNode1;
        {
            // Block
        TLPar tlparNode2;
        PEqualityExpression pequalityexpressionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pequalityexpressionNode3 = (PEqualityExpression)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        punaryexpressionnotplusminusNode1 = new ACastExpressionUnaryExpressionNotPlusMinus(tlparNode2, pequalityexpressionNode3, trparNode4);
        }
	nodeList.add(punaryexpressionnotplusminusNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AValorPostfixExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPostfixExpression ppostfixexpressionNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        ppostfixexpressionNode1 = new AValorPostfixExpression(pvalorNode2);
        }
	nodeList.add(ppostfixexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AVarPostfixExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPostfixExpression ppostfixexpressionNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        ppostfixexpressionNode1 = new AVarPostfixExpression(pvarNode2);
        }
	nodeList.add(ppostfixexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PAssignmentExpression passignmentexpressionNode2;
        passignmentexpressionNode2 = (PAssignmentExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(passignmentexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AConstantExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstantExpression pconstantexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pconstantexpressionNode1 = new AConstantExpression(pexpressionNode2);
        }
	nodeList.add(pconstantexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AEqualityExpressionAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAndExpression pandexpressionNode1;
        {
            // Block
        PEqualityExpression pequalityexpressionNode2;
        pequalityexpressionNode2 = (PEqualityExpression)nodeArrayList1.get(0);

        pandexpressionNode1 = new AEqualityExpressionAndExpression(pequalityexpressionNode2);
        }
	nodeList.add(pandexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAndExpressionAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAndExpression pandexpressionNode1;
        {
            // Block
        PAndExpression pandexpressionNode2;
        TAnd tandNode3;
        PEqualityExpression pequalityexpressionNode4;
        pandexpressionNode2 = (PAndExpression)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pequalityexpressionNode4 = (PEqualityExpression)nodeArrayList3.get(0);

        pandexpressionNode1 = new AAndExpressionAndExpression(pandexpressionNode2, tandNode3, pequalityexpressionNode4);
        }
	nodeList.add(pandexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAndExpressionXorExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PXorExpression pxorexpressionNode1;
        {
            // Block
        PAndExpression pandexpressionNode2;
        pandexpressionNode2 = (PAndExpression)nodeArrayList1.get(0);

        pxorexpressionNode1 = new AAndExpressionXorExpression(pandexpressionNode2);
        }
	nodeList.add(pxorexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AExclusiveOrExpressionXorExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PXorExpression pxorexpressionNode1;
        {
            // Block
        PXorExpression pxorexpressionNode2;
        TXor txorNode3;
        PAndExpression pandexpressionNode4;
        pxorexpressionNode2 = (PXorExpression)nodeArrayList1.get(0);
        txorNode3 = (TXor)nodeArrayList2.get(0);
        pandexpressionNode4 = (PAndExpression)nodeArrayList3.get(0);

        pxorexpressionNode1 = new AExclusiveOrExpressionXorExpression(pxorexpressionNode2, txorNode3, pandexpressionNode4);
        }
	nodeList.add(pxorexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AExclusiveOrExpressionOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POrExpression porexpressionNode1;
        {
            // Block
        PXorExpression pxorexpressionNode2;
        pxorexpressionNode2 = (PXorExpression)nodeArrayList1.get(0);

        porexpressionNode1 = new AExclusiveOrExpressionOrExpression(pxorexpressionNode2);
        }
	nodeList.add(porexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AInclusiveOrExpressionOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POrExpression porexpressionNode1;
        {
            // Block
        POrExpression porexpressionNode2;
        TOr torNode3;
        PXorExpression pxorexpressionNode4;
        porexpressionNode2 = (POrExpression)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pxorexpressionNode4 = (PXorExpression)nodeArrayList3.get(0);

        porexpressionNode1 = new AInclusiveOrExpressionOrExpression(porexpressionNode2, torNode3, pxorexpressionNode4);
        }
	nodeList.add(porexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AOrExpressionAssignmentExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentExpression passignmentexpressionNode1;
        {
            // Block
        POrExpression porexpressionNode2;
        porexpressionNode2 = (POrExpression)nodeArrayList1.get(0);

        passignmentexpressionNode1 = new AOrExpressionAssignmentExpression(porexpressionNode2);
        }
	nodeList.add(passignmentexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AAssignmentAssignmentExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentExpression passignmentexpressionNode1;
        {
            // Block
        PAssignment passignmentNode2;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);

        passignmentexpressionNode1 = new AAssignmentAssignmentExpression(passignmentNode2);
        }
	nodeList.add(passignmentexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TId tidNode2;
        TLArrow tlarrowNode3;
        PAssignmentExpression passignmentexpressionNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlarrowNode3 = (TLArrow)nodeArrayList2.get(0);
        passignmentexpressionNode4 = (PAssignmentExpression)nodeArrayList3.get(0);

        passignmentNode1 = new AAssignment(tidNode2, tlarrowNode3, passignmentexpressionNode4);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ATerminal$ComandoOuDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComandoOuDeclaracao pcomandooudeclaracaoNode1;
        pcomandooudeclaracaoNode1 = (PComandoOuDeclaracao)nodeArrayList1.get(0);
	if(pcomandooudeclaracaoNode1 != null)
	{
	  listNode2.add(pcomandooudeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ANonTerminal$ComandoOuDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComandoOuDeclaracao pcomandooudeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandooudeclaracaoNode2 = (PComandoOuDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandooudeclaracaoNode2 != null)
	{
	  listNode3.add(pcomandooudeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ATerminal$VarSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarSemicolon pvarsemicolonNode1;
        pvarsemicolonNode1 = (PVarSemicolon)nodeArrayList1.get(0);
	if(pvarsemicolonNode1 != null)
	{
	  listNode2.add(pvarsemicolonNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ANonTerminal$VarSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarSemicolon pvarsemicolonNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarsemicolonNode2 = (PVarSemicolon)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarsemicolonNode2 != null)
	{
	  listNode3.add(pvarsemicolonNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATerminal$CommaVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommaVar pcommavarNode1;
        pcommavarNode1 = (PCommaVar)nodeArrayList1.get(0);
	if(pcommavarNode1 != null)
	{
	  listNode2.add(pcommavarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANonTerminal$CommaVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommaVar pcommavarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommavarNode2 = (PCommaVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommavarNode2 != null)
	{
	  listNode3.add(pcommavarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ATerminal$ComandoSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComandoSemicolon pcomandosemicolonNode1;
        pcomandosemicolonNode1 = (PComandoSemicolon)nodeArrayList1.get(0);
	if(pcomandosemicolonNode1 != null)
	{
	  listNode2.add(pcomandosemicolonNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANonTerminal$ComandoSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComandoSemicolon pcomandosemicolonNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandosemicolonNode2 = (PComandoSemicolon)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandosemicolonNode2 != null)
	{
	  listNode3.add(pcomandosemicolonNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {48, SHIFT, 3}, },
			{{-1, ERROR, 2}, {57, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {1, SHIFT, 4}, },
			{{-1, ERROR, 4}, {2, SHIFT, 5}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 8}, {10, SHIFT, 9}, {14, SHIFT, 10}, {48, SHIFT, 11}, },
			{{-1, ERROR, 5}, {3, SHIFT, 18}, },
			{{-1, ERROR, 6}, {48, SHIFT, 19}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 10}, {15, SHIFT, 20}, },
			{{-1, REDUCE, 4}, {11, SHIFT, 21}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 13}, {13, SHIFT, 22}, },
			{{-1, ERROR, 14}, {4, SHIFT, 23}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 17}, {2, SHIFT, 24}, {6, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 8}, {10, SHIFT, 9}, {14, SHIFT, 10}, {48, SHIFT, 11}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 19}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 20}, {48, SHIFT, 11}, },
			{{-1, ERROR, 21}, {55, SHIFT, 31}, },
			{{-1, ERROR, 22}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 23}, {48, SHIFT, 11}, },
			{{-1, ERROR, 24}, {3, SHIFT, 45}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 30}, {7, SHIFT, 46}, {16, SHIFT, 47}, },
			{{-1, ERROR, 31}, {12, SHIFT, 50}, },
			{{-1, ERROR, 32}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 33}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 34}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 37}, {5, SHIFT, 54}, {38, SHIFT, 55}, {39, SHIFT, 56}, },
			{{-1, REDUCE, 26}, {40, SHIFT, 57}, {41, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, },
			{{-1, REDUCE, 29}, {34, SHIFT, 61}, {35, SHIFT, 62}, },
			{{-1, REDUCE, 34}, {36, SHIFT, 63}, {37, SHIFT, 64}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 44}, {5, SHIFT, 65}, {48, SHIFT, 11}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 46}, {48, SHIFT, 11}, },
			{{-1, ERROR, 47}, {5, SHIFT, 70}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 49}, {7, SHIFT, 46}, {16, SHIFT, 71}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 51}, {16, SHIFT, 73}, {38, SHIFT, 55}, {39, SHIFT, 56}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 55}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 56}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 57}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 58}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 59}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 60}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 61}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 62}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 63}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, ERROR, 64}, {15, SHIFT, 32}, {34, SHIFT, 33}, {44, SHIFT, 34}, {48, SHIFT, 11}, {53, SHIFT, 26}, {55, SHIFT, 27}, {56, SHIFT, 28}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 66}, {5, SHIFT, 84}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 68}, {5, SHIFT, 85}, {48, SHIFT, 11}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 71}, {5, SHIFT, 87}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 27}, {40, SHIFT, 57}, {41, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, },
			{{-1, REDUCE, 28}, {40, SHIFT, 57}, {41, SHIFT, 58}, {42, SHIFT, 59}, {43, SHIFT, 60}, },
			{{-1, REDUCE, 32}, {34, SHIFT, 61}, {35, SHIFT, 62}, },
			{{-1, REDUCE, 33}, {34, SHIFT, 61}, {35, SHIFT, 62}, },
			{{-1, REDUCE, 30}, {34, SHIFT, 61}, {35, SHIFT, 62}, },
			{{-1, REDUCE, 31}, {34, SHIFT, 61}, {35, SHIFT, 62}, },
			{{-1, REDUCE, 36}, {36, SHIFT, 63}, {37, SHIFT, 64}, },
			{{-1, REDUCE, 35}, {36, SHIFT, 63}, {37, SHIFT, 64}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 19}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 12}, {17, 25}, },
			{{-1, 35}, {4, 13}, {17, 13}, {20, 30}, {23, 44}, {44, 66}, {46, 69}, {68, 66}, },
			{{-1, 36}, {19, 29}, },
			{{-1, 14}, },
			{{-1, 15}, },
			{{-1, 67}, {68, 86}, },
			{{-1, -1}, },
			{{-1, 16}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 48}, {49, 72}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 37}, {32, 51}, },
			{{-1, 38}, {55, 74}, {56, 75}, },
			{{-1, 39}, {57, 76}, {58, 77}, {59, 78}, {60, 79}, },
			{{-1, 40}, {61, 80}, {62, 81}, },
			{{-1, 41}, {33, 52}, {34, 53}, {63, 82}, {64, 83}, },
			{{-1, 42}, },
			{{-1, 43}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 17}, },
			{{-1, 68}, },
			{{-1, 49}, },
			{{-1, -1}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'fim', 'const', 'real', 'inteiro', 'caractere', 'leia', id",
			"expecting: '.'",
			"expecting: ':'",
			"expecting: '('",
			"expecting: ';', ',', '[', '<-', ')', '-', '+', '*', '/', '=', '<>', '<=', '>=', '<', '>', id",
			"expecting: '<-'",
			"expecting: string, n int, n real",
			"expecting: n int",
			"expecting: '(', '-', 'nao', id, string, n int, n real",
			"expecting: 'fim', ';', 'const', 'real', 'inteiro', 'caractere', 'leia', ')', '-', '+', '*', '/', '=', '<>', '<=', '>=', '<', '>', id",
			"expecting: ',', ')'",
			"expecting: ']'",
			"expecting: ';', ')', '-', '+', '*', '/', '=', '<>', '<=', '>=', '<', '>'",
			"expecting: ';', '=', '<>'",
			"expecting: ';', ')', '=', '<>', '<=', '>=', '<', '>'",
			"expecting: ';', ')', '-', '+', '=', '<>', '<=', '>=', '<', '>'",
			"expecting: ';', id",
			"expecting: ';'",
			"expecting: ';', ',', '<-', ')', '-', '+', '*', '/', '=', '<>', '<=', '>=', '<', '>', id",
			"expecting: ')', '=', '<>'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 1, 6, 6, 6, 7, 8, 4, 9, 6, 4, 4, 4, 2, 10, 1, 11, 12, 1, 5, 4, 13, 13, 13, 4, 14, 15, 12, 12, 12, 16, 16, 17, 18, 19, 16, 16, 16, 16, 20, 2, 1, 21, 14, 14, 22, 23, 16, 16, 4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 21, 20, 20, 14, 4, 21, 14, 16, 18, 18, 19, 19, 19, 19, 16, 16, 16, 16, 20, 4, 20, 4, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
