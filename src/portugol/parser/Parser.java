/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.parser;

import portugol.lexer.*;
import portugol.node.*;
import portugol.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce APrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AIdVar */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AIdArrayVar */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AStringValor */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ANIntValor */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ANRealValor */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AIntegerTipo */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce ACharTipo */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AVariableDeclaracao */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AConstDeclaracao */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AVarSemicolon */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AAssignmentComando */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AAreadcomando1Comando */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce AAreadcomando2Comando */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce ACommaVar */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce AComparacaoExp1 */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AExp1Exp1 */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce ASomaExp2 */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list, false);
            }
            break;
            case 19: /* reduce AExp2Exp2 */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce AExpLogicaExp2 */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list, false);
            }
            break;
            case 21: /* reduce AMaisSoma */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce AMenosSoma */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce AIgualComparacao */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce ADiferenteComparacao */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce AMenorIgualComparacao */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce AMaiorIgualComparacao */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce AMenorComparacao */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list, false);
            }
            break;
            case 28: /* reduce AMaiorComparacao */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list, false);
            }
            break;
            case 29: /* reduce AExp2Exp3 */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list, false);
            }
            break;
            case 30: /* reduce AExp3Exp3 */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list, false);
            }
            break;
            case 31: /* reduce AMultMultDiv */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list, false);
            }
            break;
            case 32: /* reduce ADivMultDiv */
            {
                ArrayList<Object> list = new32();
                push(goTo(13), list, false);
            }
            break;
            case 33: /* reduce AParentesesExpExp4 */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce AExp5Exp4 */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list, false);
            }
            break;
            case 35: /* reduce AValorExp5 */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce AVarExp5 */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce AOuExpLogica1 */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list, false);
            }
            break;
            case 38: /* reduce AXorExpLogica1 */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, false);
            }
            break;
            case 39: /* reduce AExpLogica2ExpLogica1 */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce AEExpLogica2 */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list, false);
            }
            break;
            case 41: /* reduce AExpLogica3ExpLogica2 */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list, false);
            }
            break;
            case 42: /* reduce ANotExpLogica3 */
            {
                ArrayList<Object> list = new42();
                push(goTo(18), list, false);
            }
            break;
            case 43: /* reduce ATerminal$VarSemicolon */
            {
                ArrayList<Object> list = new43();
                push(goTo(19), list, true);
            }
            break;
            case 44: /* reduce ANonTerminal$VarSemicolon */
            {
                ArrayList<Object> list = new44();
                push(goTo(19), list, true);
            }
            break;
            case 45: /* reduce ATerminal$CommaVar */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list, true);
            }
            break;
            case 46: /* reduce ANonTerminal$CommaVar */
            {
                ArrayList<Object> list = new46();
                push(goTo(20), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce APrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TProgram tprogramNode2;
        TId tidNode3;
        TBegin tbeginNode4;
        PExp1 pexp1Node5;
        TEnd tendNode6;
        TDot tdotNode7;
        tprogramNode2 = (TProgram)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tbeginNode4 = (TBegin)nodeArrayList3.get(0);
        pexp1Node5 = (PExp1)nodeArrayList4.get(0);
        tendNode6 = (TEnd)nodeArrayList5.get(0);
        tdotNode7 = (TDot)nodeArrayList6.get(0);

        pprogramaNode1 = new APrograma(tprogramNode2, tidNode3, tbeginNode4, pexp1Node5, tendNode6, tdotNode7);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AIdArrayVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TLBkt tlbktNode3;
        TNInt tnintNode4;
        TRBkt trbktNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlbktNode3 = (TLBkt)nodeArrayList2.get(0);
        tnintNode4 = (TNInt)nodeArrayList3.get(0);
        trbktNode5 = (TRBkt)nodeArrayList4.get(0);

        pvarNode1 = new AIdArrayVar(tidNode2, tlbktNode3, tnintNode4, trbktNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ANIntValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNInt tnintNode2;
        tnintNode2 = (TNInt)nodeArrayList1.get(0);

        pvalorNode1 = new ANIntValor(tnintNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ANRealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNReal tnrealNode2;
        tnrealNode2 = (TNReal)nodeArrayList1.get(0);

        pvalorNode1 = new ANRealValor(tnrealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AIntegerTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        ptipoNode1 = new AIntegerTipo(tintegerNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ACharTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        ptipoNode1 = new ACharTipo(tcharNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVariableDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TColon tcolonNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tcolonNode3 = (TColon)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pdeclaracaoNode1 = new AVariableDeclaracao(ptipoNode2, tcolonNode3, listNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AConstDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TConst tconstNode2;
        TId tidNode3;
        PValor pvalorNode4;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AConstDeclaracao(tconstNode2, tidNode3, pvalorNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AVarSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarSemicolon pvarsemicolonNode1;
        {
            // Block
        PVar pvarNode2;
        TSemicolon tsemicolonNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pvarsemicolonNode1 = new AVarSemicolon(pvarNode2, tsemicolonNode3);
        }
	nodeList.add(pvarsemicolonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAssignmentComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TLArrow tlarrowNode3;
        PExp1 pexp1Node4;
        TSemicolon tsemicolonNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tlarrowNode3 = (TLArrow)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        pcomandoNode1 = new AAssignmentComando(pvarNode2, tlarrowNode3, pexp1Node4, tsemicolonNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAreadcomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TRead treadNode2;
        TLPar tlparNode3;
        PVar pvarNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRPar trparNode6;
        TSemicolon tsemicolonNode7;
        treadNode2 = (TRead)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        {
            // Block
        }
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode7 = (TSemicolon)nodeArrayList5.get(0);

        pcomandoNode1 = new AReadComando(treadNode2, tlparNode3, pvarNode4, listNode5, trparNode6, tsemicolonNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAreadcomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TRead treadNode2;
        TLPar tlparNode3;
        PVar pvarNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TRPar trparNode7;
        TSemicolon tsemicolonNode8;
        treadNode2 = (TRead)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trparNode7 = (TRPar)nodeArrayList5.get(0);
        tsemicolonNode8 = (TSemicolon)nodeArrayList6.get(0);

        pcomandoNode1 = new AReadComando(treadNode2, tlparNode3, pvarNode4, listNode6, trparNode7, tsemicolonNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ACommaVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommaVar pcommavarNode1;
        {
            // Block
        TComma tcommaNode2;
        PVar pvarNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);

        pcommavarNode1 = new ACommaVar(tcommaNode2, pvarNode3);
        }
	nodeList.add(pcommavarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AComparacaoExp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp2 pexp2Node2;
        PComparacao pcomparacaoNode3;
        PExp1 pexp1Node4;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);
        pcomparacaoNode3 = (PComparacao)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);

        pexp1Node1 = new AComparacaoExp1(pexp2Node2, pcomparacaoNode3, pexp1Node4);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AExp1Exp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp2 pexp2Node2;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);

        pexp1Node1 = new AExp1Exp1(pexp2Node2);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ASomaExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp3 pexp3Node2;
        PSoma psomaNode3;
        PExp2 pexp2Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        psomaNode3 = (PSoma)nodeArrayList2.get(0);
        pexp2Node4 = (PExp2)nodeArrayList3.get(0);

        pexp2Node1 = new ASomaExp2(pexp3Node2, psomaNode3, pexp2Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AExp2Exp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp3 pexp3Node2;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);

        pexp2Node1 = new AExp2Exp2(pexp3Node2);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AExpLogicaExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExpLogica1 pexplogica1Node2;
        pexplogica1Node2 = (PExpLogica1)nodeArrayList1.get(0);

        pexp2Node1 = new AExpLogicaExp2(pexplogica1Node2);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AMaisSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSoma psomaNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        psomaNode1 = new AMaisSoma(tplusNode2);
        }
	nodeList.add(psomaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AMenosSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSoma psomaNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        psomaNode1 = new AMenosSoma(tminusNode2);
        }
	nodeList.add(psomaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AIgualComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AIgualComparacao(tequalNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ADiferenteComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TNotEqual tnotequalNode2;
        tnotequalNode2 = (TNotEqual)nodeArrayList1.get(0);

        pcomparacaoNode1 = new ADiferenteComparacao(tnotequalNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AMenorIgualComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TLEqual tlequalNode2;
        tlequalNode2 = (TLEqual)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AMenorIgualComparacao(tlequalNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AMaiorIgualComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TGEqual tgequalNode2;
        tgequalNode2 = (TGEqual)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AMaiorIgualComparacao(tgequalNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AMenorComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TLess tlessNode2;
        tlessNode2 = (TLess)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AMenorComparacao(tlessNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AMaiorComparacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparacao pcomparacaoNode1;
        {
            // Block
        TGreater tgreaterNode2;
        tgreaterNode2 = (TGreater)nodeArrayList1.get(0);

        pcomparacaoNode1 = new AMaiorComparacao(tgreaterNode2);
        }
	nodeList.add(pcomparacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AExp2Exp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp4 pexp4Node2;
        PMultDiv pmultdivNode3;
        PExp3 pexp3Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        pmultdivNode3 = (PMultDiv)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp3Node1 = new AExp2Exp3(pexp4Node2, pmultdivNode3, pexp3Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AExp3Exp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp4 pexp4Node2;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);

        pexp3Node1 = new AExp3Exp3(pexp4Node2);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AMultMultDiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultDiv pmultdivNode1;
        {
            // Block
        TStar tstarNode2;
        tstarNode2 = (TStar)nodeArrayList1.get(0);

        pmultdivNode1 = new AMultMultDiv(tstarNode2);
        }
	nodeList.add(pmultdivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ADivMultDiv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMultDiv pmultdivNode1;
        {
            // Block
        TBar tbarNode2;
        tbarNode2 = (TBar)nodeArrayList1.get(0);

        pmultdivNode1 = new ADivMultDiv(tbarNode2);
        }
	nodeList.add(pmultdivNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AParentesesExpExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        TLPar tlparNode2;
        PExp1 pexp1Node3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexp1Node3 = (PExp1)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexp4Node1 = new AParentesesExpExp4(tlparNode2, pexp1Node3, trparNode4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AExp5Exp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp5 pexp5Node2;
        pexp5Node2 = (PExp5)nodeArrayList1.get(0);

        pexp4Node1 = new AExp5Exp4(pexp5Node2);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AValorExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexp5Node1 = new AValorExp5(pvalorNode2);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AVarExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexp5Node1 = new AVarExp5(pvarNode2);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AOuExpLogica1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica1 pexplogica1Node1;
        {
            // Block
        PExpLogica2 pexplogica2Node2;
        TOr torNode3;
        PExpLogica3 pexplogica3Node4;
        pexplogica2Node2 = (PExpLogica2)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pexplogica3Node4 = (PExpLogica3)nodeArrayList3.get(0);

        pexplogica1Node1 = new AOuExpLogica1(pexplogica2Node2, torNode3, pexplogica3Node4);
        }
	nodeList.add(pexplogica1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AXorExpLogica1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica1 pexplogica1Node1;
        {
            // Block
        PExpLogica2 pexplogica2Node2;
        TXor txorNode3;
        PExpLogica3 pexplogica3Node4;
        pexplogica2Node2 = (PExpLogica2)nodeArrayList1.get(0);
        txorNode3 = (TXor)nodeArrayList2.get(0);
        pexplogica3Node4 = (PExpLogica3)nodeArrayList3.get(0);

        pexplogica1Node1 = new AXorExpLogica1(pexplogica2Node2, txorNode3, pexplogica3Node4);
        }
	nodeList.add(pexplogica1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AExpLogica2ExpLogica1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica1 pexplogica1Node1;
        {
            // Block
        PExpLogica2 pexplogica2Node2;
        pexplogica2Node2 = (PExpLogica2)nodeArrayList1.get(0);

        pexplogica1Node1 = new AExpLogica2ExpLogica1(pexplogica2Node2);
        }
	nodeList.add(pexplogica1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AEExpLogica2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica2 pexplogica2Node1;
        {
            // Block
        PExpLogica3 pexplogica3Node2;
        TAnd tandNode3;
        PExpLogica2 pexplogica2Node4;
        pexplogica3Node2 = (PExpLogica3)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pexplogica2Node4 = (PExpLogica2)nodeArrayList3.get(0);

        pexplogica2Node1 = new AEExpLogica2(pexplogica3Node2, tandNode3, pexplogica2Node4);
        }
	nodeList.add(pexplogica2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExpLogica3ExpLogica2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica2 pexplogica2Node1;
        {
            // Block
        PExpLogica3 pexplogica3Node2;
        pexplogica3Node2 = (PExpLogica3)nodeArrayList1.get(0);

        pexplogica2Node1 = new AExpLogica3ExpLogica2(pexplogica3Node2);
        }
	nodeList.add(pexplogica2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ANotExpLogica3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica3 pexplogica3Node1;
        {
            // Block
        TNot tnotNode2;
        PExpLogica3 pexplogica3Node3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pexplogica3Node3 = (PExpLogica3)nodeArrayList2.get(0);

        pexplogica3Node1 = new ANotExpLogica3(tnotNode2, pexplogica3Node3);
        }
	nodeList.add(pexplogica3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ATerminal$VarSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarSemicolon pvarsemicolonNode1;
        pvarsemicolonNode1 = (PVarSemicolon)nodeArrayList1.get(0);
	if(pvarsemicolonNode1 != null)
	{
	  listNode2.add(pvarsemicolonNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ANonTerminal$VarSemicolon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarSemicolon pvarsemicolonNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarsemicolonNode2 = (PVarSemicolon)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarsemicolonNode2 != null)
	{
	  listNode3.add(pvarsemicolonNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ATerminal$CommaVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommaVar pcommavarNode1;
        pcommavarNode1 = (PCommaVar)nodeArrayList1.get(0);
	if(pcommavarNode1 != null)
	{
	  listNode2.add(pcommavarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ANonTerminal$CommaVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommaVar pcommavarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommavarNode2 = (PCommaVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommavarNode2 != null)
	{
	  listNode3.add(pcommavarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {48, SHIFT, 3}, },
			{{-1, ERROR, 2}, {57, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {1, SHIFT, 4}, },
			{{-1, ERROR, 4}, {15, SHIFT, 5}, {44, SHIFT, 6}, {48, SHIFT, 7}, {53, SHIFT, 8}, {55, SHIFT, 9}, {56, SHIFT, 10}, },
			{{-1, ERROR, 5}, {15, SHIFT, 5}, {44, SHIFT, 6}, {48, SHIFT, 7}, {53, SHIFT, 8}, {55, SHIFT, 9}, {56, SHIFT, 10}, },
			{{-1, ERROR, 6}, {44, SHIFT, 6}, },
			{{-1, REDUCE, 1}, {11, SHIFT, 23}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 13}, {2, SHIFT, 24}, },
			{{-1, REDUCE, 17}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, {41, SHIFT, 28}, {42, SHIFT, 29}, {43, SHIFT, 30}, },
			{{-1, REDUCE, 19}, {34, SHIFT, 32}, {35, SHIFT, 33}, },
			{{-1, REDUCE, 30}, {36, SHIFT, 35}, {37, SHIFT, 36}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 39}, {46, SHIFT, 38}, {47, SHIFT, 39}, },
			{{-1, REDUCE, 41}, {45, SHIFT, 40}, },
			{{-1, ERROR, 21}, {16, SHIFT, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 23}, {55, SHIFT, 42}, },
			{{-1, ERROR, 24}, {3, SHIFT, 43}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 31}, {15, SHIFT, 5}, {44, SHIFT, 6}, {48, SHIFT, 7}, {53, SHIFT, 8}, {55, SHIFT, 9}, {56, SHIFT, 10}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 34}, {15, SHIFT, 5}, {44, SHIFT, 6}, {48, SHIFT, 7}, {53, SHIFT, 8}, {55, SHIFT, 9}, {56, SHIFT, 10}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 37}, {15, SHIFT, 5}, {48, SHIFT, 7}, {53, SHIFT, 8}, {55, SHIFT, 9}, {56, SHIFT, 10}, },
			{{-1, ERROR, 38}, {44, SHIFT, 6}, },
			{{-1, ERROR, 39}, {44, SHIFT, 6}, },
			{{-1, ERROR, 40}, {44, SHIFT, 6}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 42}, {12, SHIFT, 50}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 2}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 11}, },
			{{-1, 12}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 13}, {5, 21}, {31, 44}, },
			{{-1, 14}, {34, 45}, },
			{{-1, 34}, },
			{{-1, 31}, },
			{{-1, 15}, {37, 46}, },
			{{-1, 37}, },
			{{-1, 16}, },
			{{-1, 17}, },
			{{-1, 18}, },
			{{-1, 19}, {40, 49}, },
			{{-1, 20}, {6, 22}, {38, 47}, {39, 48}, },
			{{-1, -1}, },
			{{-1, -1}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: '(', 'nao', id, string, n int, n real",
			"expecting: 'nao'",
			"expecting: 'fim', '[', ')', '-', '+', '*', '/', '=', '<>', '<=', '>=', '<', '>'",
			"expecting: 'fim', ')', '-', '+', '*', '/', '=', '<>', '<=', '>=', '<', '>'",
			"expecting: 'fim'",
			"expecting: 'fim', ')', '=', '<>', '<=', '>=', '<', '>'",
			"expecting: 'fim', ')', '-', '+', '=', '<>', '<=', '>=', '<', '>'",
			"expecting: 'fim', ')', '=', '<>', '<=', '>=', '<', '>', 'ou', 'xor'",
			"expecting: 'fim', ')', '=', '<>', '<=', '>=', '<', '>', 'e', 'ou', 'xor'",
			"expecting: ')'",
			"expecting: n int",
			"expecting: '.'",
			"expecting: '(', id, string, n int, n real",
			"expecting: ']'",
			"expecting: 'fim', ')'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 5, 6, 7, 7, 7, 7, 7, 8, 9, 10, 7, 7, 9, 11, 12, 13, 12, 14, 15, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 5, 5, 5, 7, 17, 2, 18, 9, 10, 9, 9, 11, 7, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
