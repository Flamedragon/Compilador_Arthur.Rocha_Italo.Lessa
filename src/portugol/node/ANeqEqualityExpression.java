/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.node;

import portugol.analysis.*;

@SuppressWarnings("nls")
public final class ANeqEqualityExpression extends PEqualityExpression
{
    private PEqualityExpression _equalityExpression_;
    private TNotEqual _notEqual_;
    private PRelationalExpression _relationalExpression_;

    public ANeqEqualityExpression()
    {
        // Constructor
    }

    public ANeqEqualityExpression(
        @SuppressWarnings("hiding") PEqualityExpression _equalityExpression_,
        @SuppressWarnings("hiding") TNotEqual _notEqual_,
        @SuppressWarnings("hiding") PRelationalExpression _relationalExpression_)
    {
        // Constructor
        setEqualityExpression(_equalityExpression_);

        setNotEqual(_notEqual_);

        setRelationalExpression(_relationalExpression_);

    }

    @Override
    public Object clone()
    {
        return new ANeqEqualityExpression(
            cloneNode(this._equalityExpression_),
            cloneNode(this._notEqual_),
            cloneNode(this._relationalExpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANeqEqualityExpression(this);
    }

    public PEqualityExpression getEqualityExpression()
    {
        return this._equalityExpression_;
    }

    public void setEqualityExpression(PEqualityExpression node)
    {
        if(this._equalityExpression_ != null)
        {
            this._equalityExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equalityExpression_ = node;
    }

    public TNotEqual getNotEqual()
    {
        return this._notEqual_;
    }

    public void setNotEqual(TNotEqual node)
    {
        if(this._notEqual_ != null)
        {
            this._notEqual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._notEqual_ = node;
    }

    public PRelationalExpression getRelationalExpression()
    {
        return this._relationalExpression_;
    }

    public void setRelationalExpression(PRelationalExpression node)
    {
        if(this._relationalExpression_ != null)
        {
            this._relationalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relationalExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._equalityExpression_)
            + toString(this._notEqual_)
            + toString(this._relationalExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._equalityExpression_ == child)
        {
            this._equalityExpression_ = null;
            return;
        }

        if(this._notEqual_ == child)
        {
            this._notEqual_ = null;
            return;
        }

        if(this._relationalExpression_ == child)
        {
            this._relationalExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._equalityExpression_ == oldChild)
        {
            setEqualityExpression((PEqualityExpression) newChild);
            return;
        }

        if(this._notEqual_ == oldChild)
        {
            setNotEqual((TNotEqual) newChild);
            return;
        }

        if(this._relationalExpression_ == oldChild)
        {
            setRelationalExpression((PRelationalExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
