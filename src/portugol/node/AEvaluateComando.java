/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.node;

import java.util.*;
import portugol.analysis.*;

@SuppressWarnings("nls")
public final class AEvaluateComando extends PComando
{
    private PExpression _expression_;
    private final LinkedList<PEvaluateBody> _evaluateBody_ = new LinkedList<PEvaluateBody>();
    private final LinkedList<PElseEvaluate> _elseEvaluate_ = new LinkedList<PElseEvaluate>();

    public AEvaluateComando()
    {
        // Constructor
    }

    public AEvaluateComando(
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") List<?> _evaluateBody_,
        @SuppressWarnings("hiding") List<?> _elseEvaluate_)
    {
        // Constructor
        setExpression(_expression_);

        setEvaluateBody(_evaluateBody_);

        setElseEvaluate(_elseEvaluate_);

    }

    @Override
    public Object clone()
    {
        return new AEvaluateComando(
            cloneNode(this._expression_),
            cloneList(this._evaluateBody_),
            cloneList(this._elseEvaluate_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEvaluateComando(this);
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public LinkedList<PEvaluateBody> getEvaluateBody()
    {
        return this._evaluateBody_;
    }

    public void setEvaluateBody(List<?> list)
    {
        for(PEvaluateBody e : this._evaluateBody_)
        {
            e.parent(null);
        }
        this._evaluateBody_.clear();

        for(Object obj_e : list)
        {
            PEvaluateBody e = (PEvaluateBody) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._evaluateBody_.add(e);
        }
    }

    public LinkedList<PElseEvaluate> getElseEvaluate()
    {
        return this._elseEvaluate_;
    }

    public void setElseEvaluate(List<?> list)
    {
        for(PElseEvaluate e : this._elseEvaluate_)
        {
            e.parent(null);
        }
        this._elseEvaluate_.clear();

        for(Object obj_e : list)
        {
            PElseEvaluate e = (PElseEvaluate) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._elseEvaluate_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expression_)
            + toString(this._evaluateBody_)
            + toString(this._elseEvaluate_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._evaluateBody_.remove(child))
        {
            return;
        }

        if(this._elseEvaluate_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        for(ListIterator<PEvaluateBody> i = this._evaluateBody_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PEvaluateBody) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PElseEvaluate> i = this._elseEvaluate_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PElseEvaluate) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
