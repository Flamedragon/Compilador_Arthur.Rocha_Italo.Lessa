/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.node;

import java.util.*;
import portugol.analysis.*;

@SuppressWarnings("nls")
public final class AVariableDeclaration extends PDeclaration
{
    private PTipo _tipo_;
    private TColon _colon_;
    private final LinkedList<PVarList> _varList_ = new LinkedList<PVarList>();

    public AVariableDeclaration()
    {
        // Constructor
    }

    public AVariableDeclaration(
        @SuppressWarnings("hiding") PTipo _tipo_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") List<?> _varList_)
    {
        // Constructor
        setTipo(_tipo_);

        setColon(_colon_);

        setVarList(_varList_);

    }

    @Override
    public Object clone()
    {
        return new AVariableDeclaration(
            cloneNode(this._tipo_),
            cloneNode(this._colon_),
            cloneList(this._varList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVariableDeclaration(this);
    }

    public PTipo getTipo()
    {
        return this._tipo_;
    }

    public void setTipo(PTipo node)
    {
        if(this._tipo_ != null)
        {
            this._tipo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tipo_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public LinkedList<PVarList> getVarList()
    {
        return this._varList_;
    }

    public void setVarList(List<?> list)
    {
        for(PVarList e : this._varList_)
        {
            e.parent(null);
        }
        this._varList_.clear();

        for(Object obj_e : list)
        {
            PVarList e = (PVarList) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._varList_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tipo_)
            + toString(this._colon_)
            + toString(this._varList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tipo_ == child)
        {
            this._tipo_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._varList_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tipo_ == oldChild)
        {
            setTipo((PTipo) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        for(ListIterator<PVarList> i = this._varList_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarList) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
