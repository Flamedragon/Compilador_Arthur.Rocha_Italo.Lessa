/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.node;

import java.util.*;
import portugol.analysis.*;

@SuppressWarnings("nls")
public final class AWhileComando extends PComando
{
    private TWhile _while_;
    private TLPar _lPar_;
    private PExpLogica1 _expLogica1_;
    private TRPar _rPar_;
    private TDo _do_;
    private final LinkedList<PComandoSemicolon> _comandoSemicolon_ = new LinkedList<PComandoSemicolon>();
    private TEndWhile _endWhile_;
    private TSemicolon _semicolon_;

    public AWhileComando()
    {
        // Constructor
    }

    public AWhileComando(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PExpLogica1 _expLogica1_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") List<?> _comandoSemicolon_,
        @SuppressWarnings("hiding") TEndWhile _endWhile_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setWhile(_while_);

        setLPar(_lPar_);

        setExpLogica1(_expLogica1_);

        setRPar(_rPar_);

        setDo(_do_);

        setComandoSemicolon(_comandoSemicolon_);

        setEndWhile(_endWhile_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AWhileComando(
            cloneNode(this._while_),
            cloneNode(this._lPar_),
            cloneNode(this._expLogica1_),
            cloneNode(this._rPar_),
            cloneNode(this._do_),
            cloneList(this._comandoSemicolon_),
            cloneNode(this._endWhile_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileComando(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PExpLogica1 getExpLogica1()
    {
        return this._expLogica1_;
    }

    public void setExpLogica1(PExpLogica1 node)
    {
        if(this._expLogica1_ != null)
        {
            this._expLogica1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expLogica1_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public LinkedList<PComandoSemicolon> getComandoSemicolon()
    {
        return this._comandoSemicolon_;
    }

    public void setComandoSemicolon(List<?> list)
    {
        for(PComandoSemicolon e : this._comandoSemicolon_)
        {
            e.parent(null);
        }
        this._comandoSemicolon_.clear();

        for(Object obj_e : list)
        {
            PComandoSemicolon e = (PComandoSemicolon) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comandoSemicolon_.add(e);
        }
    }

    public TEndWhile getEndWhile()
    {
        return this._endWhile_;
    }

    public void setEndWhile(TEndWhile node)
    {
        if(this._endWhile_ != null)
        {
            this._endWhile_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endWhile_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._lPar_)
            + toString(this._expLogica1_)
            + toString(this._rPar_)
            + toString(this._do_)
            + toString(this._comandoSemicolon_)
            + toString(this._endWhile_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._expLogica1_ == child)
        {
            this._expLogica1_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._comandoSemicolon_.remove(child))
        {
            return;
        }

        if(this._endWhile_ == child)
        {
            this._endWhile_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._expLogica1_ == oldChild)
        {
            setExpLogica1((PExpLogica1) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        for(ListIterator<PComandoSemicolon> i = this._comandoSemicolon_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComandoSemicolon) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._endWhile_ == oldChild)
        {
            setEndWhile((TEndWhile) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
