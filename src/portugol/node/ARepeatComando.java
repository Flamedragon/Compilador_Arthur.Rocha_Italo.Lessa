/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.node;

import java.util.*;
import portugol.analysis.*;

@SuppressWarnings("nls")
public final class ARepeatComando extends PComando
{
    private TRepeat _repeat_;
    private final LinkedList<PComandoSemicolon> _comandoSemicolon_ = new LinkedList<PComandoSemicolon>();
    private TUntil _until_;
    private TLPar _lPar_;
    private PExpLogica1 _expLogica1_;
    private TRPar _rPar_;
    private TSemicolon _semicolon_;

    public ARepeatComando()
    {
        // Constructor
    }

    public ARepeatComando(
        @SuppressWarnings("hiding") TRepeat _repeat_,
        @SuppressWarnings("hiding") List<?> _comandoSemicolon_,
        @SuppressWarnings("hiding") TUntil _until_,
        @SuppressWarnings("hiding") TLPar _lPar_,
        @SuppressWarnings("hiding") PExpLogica1 _expLogica1_,
        @SuppressWarnings("hiding") TRPar _rPar_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setRepeat(_repeat_);

        setComandoSemicolon(_comandoSemicolon_);

        setUntil(_until_);

        setLPar(_lPar_);

        setExpLogica1(_expLogica1_);

        setRPar(_rPar_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new ARepeatComando(
            cloneNode(this._repeat_),
            cloneList(this._comandoSemicolon_),
            cloneNode(this._until_),
            cloneNode(this._lPar_),
            cloneNode(this._expLogica1_),
            cloneNode(this._rPar_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARepeatComando(this);
    }

    public TRepeat getRepeat()
    {
        return this._repeat_;
    }

    public void setRepeat(TRepeat node)
    {
        if(this._repeat_ != null)
        {
            this._repeat_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._repeat_ = node;
    }

    public LinkedList<PComandoSemicolon> getComandoSemicolon()
    {
        return this._comandoSemicolon_;
    }

    public void setComandoSemicolon(List<?> list)
    {
        for(PComandoSemicolon e : this._comandoSemicolon_)
        {
            e.parent(null);
        }
        this._comandoSemicolon_.clear();

        for(Object obj_e : list)
        {
            PComandoSemicolon e = (PComandoSemicolon) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comandoSemicolon_.add(e);
        }
    }

    public TUntil getUntil()
    {
        return this._until_;
    }

    public void setUntil(TUntil node)
    {
        if(this._until_ != null)
        {
            this._until_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._until_ = node;
    }

    public TLPar getLPar()
    {
        return this._lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(this._lPar_ != null)
        {
            this._lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lPar_ = node;
    }

    public PExpLogica1 getExpLogica1()
    {
        return this._expLogica1_;
    }

    public void setExpLogica1(PExpLogica1 node)
    {
        if(this._expLogica1_ != null)
        {
            this._expLogica1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expLogica1_ = node;
    }

    public TRPar getRPar()
    {
        return this._rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(this._rPar_ != null)
        {
            this._rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rPar_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._repeat_)
            + toString(this._comandoSemicolon_)
            + toString(this._until_)
            + toString(this._lPar_)
            + toString(this._expLogica1_)
            + toString(this._rPar_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._repeat_ == child)
        {
            this._repeat_ = null;
            return;
        }

        if(this._comandoSemicolon_.remove(child))
        {
            return;
        }

        if(this._until_ == child)
        {
            this._until_ = null;
            return;
        }

        if(this._lPar_ == child)
        {
            this._lPar_ = null;
            return;
        }

        if(this._expLogica1_ == child)
        {
            this._expLogica1_ = null;
            return;
        }

        if(this._rPar_ == child)
        {
            this._rPar_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._repeat_ == oldChild)
        {
            setRepeat((TRepeat) newChild);
            return;
        }

        for(ListIterator<PComandoSemicolon> i = this._comandoSemicolon_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComandoSemicolon) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._until_ == oldChild)
        {
            setUntil((TUntil) newChild);
            return;
        }

        if(this._lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(this._expLogica1_ == oldChild)
        {
            setExpLogica1((PExpLogica1) newChild);
            return;
        }

        if(this._rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
