Package portugol;

Helpers
	digit_excluding_zero = ['1'..'9'];
	digit = ['0'..'9'];
	lowercase = ['a'..'z'];
	uppercase = ['A'..'Z'];
	letter = lowercase | uppercase ;
	cr = 13;
	lf = 10;
	tab = 9;
	anything = [0..0xffff];

Tokens
	program = 'programa';
	begin = 'inicio';
	end = 'fim';
	dot = '.';
	colon = ':';
	semicolon = ';';
	const = 'const';
	comma = ',';
	real = 'real';
	integer = 'inteiro';
	char = 'charactere';
	l_bkt = '[';
	r_bkt = ']';
	l_arrow = '<-';
	read = 'leia';
	l_par = '(';
	r_par = ')';
	write = 'escreva';
	if = 'se';
	then = 'entao';
	else = 'senao';
	end_if = 'fim se';
	evaluate = 'avalie';
	case = 'caso';
	end_evaluate = 'fim avalie';
	while = 'enquanto';
	do = 'faca';
	end_while = 'fim enquanto';
	repeat = 'repita';
	until = 'ate';
	for = 'para';
	of = 'de';
	end_for = 'fim para';	
	minus = '-';
	plus = '+';
	star = '*';
	bar = '/';
	equal = '=';
	not_equal = '<>';
	l_equal = '<=';
	g_equal = '>=';
	less = '<';
	greater = '>';
	not = 'nao';
	and = 'e';
	or = 'ou';
	xor = 'xor';

	id = (letter | '_') (letter | digit | '_')*;
	line_comment = '//' [anything - [cr + lf ]]*  (lf cr | lf | cr );
	block_commnet = '/*' [anything - ['*' + '/']]* '*/';
	vector = (letter | '_') (letter | digit | '_')* '[' digit* ']';
	n_int = '-'? digit_excluding_zero digit*;
	n_real = digit digit* '.' digit digit*;
	blank = (' ' | cr | lf | tab)+;

Ignored Tokens
	blank;


Productions

	programa = program id begin declaracao* comando* end dot;

	declaracao = tipo colon var_comma* var semicolon;

	var_comma = var comma;

	comando_semicolon = comando semicolon;

	camando_colon = comando colon;

	exp_comma = exp comma;
	
	tipo = real | integer | char;

	var = id | id l_bkt n_int r_bkt;

	valor = string | n_int | n_real;

	comando = var l_arrow exp semicolon
						| read l_par var_comma* var r_par semicolon
						| write l_par exp_comma* exp r_par  
						| if l_par exp-logica r_par then comando_semicolon* comando semicolon [ else comando_colon* comando semicolon] end_if semicolon
						| evaluate l_par exp r_par { case valor colon comando_semicolon* comando semicolon } [ else colon comando_semicolon* comando semicolon] end_evaluate semicolon
						| while l_par exp-logica r_par do comando_semicolon* comando semicolon end_while semicolon
						| repeat comando_semicolon* comando semicolon until l_par exp-logica r_par semicolon
						| for var of n_int until n_int do comando_semicolon* comando semicolon end_for semicolon
						| for var of n_int step n_int until n_int do comando_semicolon* comando semicolon end_for semicolon;

	exp = valor
				| var
				| l_par exp r_par
				| minus exp 
				| exp plus exp
				| exp minus exp
				| exp star exp
				| exp bar exp
				| exp-logica;

	exp-logica = exp equal exp
							 | exp not_equal exp
							 | exp l_equal exp
							 | exp g_equal exp
							 | exp less exp
							 | exp greater exp
							 | not exp-logica
							 | exp-logica and exp-logica
							 | exp-logica or exp-logica
							 | exp-logica xor exp-logica

